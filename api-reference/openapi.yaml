openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/v1/auth/login:
    post:
      operationId: login
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/logout:
    post:
      operationId: logout
      description: Logout a user by blacklisting their refresh token
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/mfa/challenge:
    post:
      operationId: verify_mfa_challenge
      description: Verify an MFA challenge during login
      tags:
        - MFA
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAChallengeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MFAChallengeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAChallengeRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/mfa/disable:
    post:
      operationId: disable_mfa
      description: Disable Multi-Factor Authentication for a user
      tags:
        - MFA
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFADisableResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/mfa/setup:
    post:
      operationId: setup_mfa
      description: Set up Multi-Factor Authentication for a user
      tags:
        - MFA
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFASetupResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/mfa/verify:
    post:
      operationId: verify_mfa_setup
      description: Verify MFA setup with a verification code
      tags:
        - MFA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MFAVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAVerifyRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAVerifyResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/password-reset:
    post:
      operationId: request_password_reset
      description: Request a password reset link
      tags:
        - Password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/password-reset/confirm:
    post:
      operationId: confirm_password_reset
      description: Confirm password reset with token
      tags:
        - Password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/profile/:
    get:
      operationId: get_profile
      description: Get the current user's profile information
      tags:
        - Profile
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: update_profile
      description: Update the current user's profile
      tags:
        - Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/refresh-token:
    post:
      operationId: refresh_token_view
      description: Refresh an access token using a refresh token
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/auth/register:
    post:
      operationId: register
      description: Register a new user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/:
    get:
      operationId: list_projects
      description: Returns all projects with optional filtering
      summary: List projects
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter by project name
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter projects
        - in: query
          name: status
          schema:
            type: string
            enum:
              - active
              - archived
              - inactive
          description: Filter by project status
      tags:
        - Projects
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    post:
      operationId: create_project
      description: Creates a new project
      summary: Create project
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/:
    get:
      operationId: get_project
      description: Retrieves a specific project by ID
      summary: Get project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Projects
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    put:
      operationId: update_project
      description: Updates an existing project
      summary: Update project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    delete:
      operationId: delete_project
      description: Deletes an existing project
      summary: Delete project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Projects
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: Project deleted successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Cannot delete default project
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/agents:
    get:
      operationId: list_project_agents
      description: Returns all agents for a project
      summary: List project agents
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Project Agents
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentListResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    post:
      operationId: create_project_agent
      description: Creates a new agent for a project
      summary: Create project agent
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Project Agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AgentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AgentRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/agents/:
    get:
      operationId: v1_projects_agents_retrieve
      description: List all agents for the current user or for a specific project.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_agents_create
      description: Create a new agent.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/:
    get:
      operationId: v1_projects_agents_retrieve_2
      description: Retrieve details of a specific agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_agents_update
      description: Update a specific agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_agents_destroy
      description: Delete a specific agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/config/:
    get:
      operationId: v1_projects_agents_config_retrieve
      description: Retrieve an agent's configuration.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_agents_config_update
      description: Update an agent's configuration.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/files/:
    get:
      operationId: v1_projects_agents_files_retrieve
      description: Get the contents of a file in the agent's workspace.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_agents_files_create
      description: Upload a file to the agent's workspace.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_agents_files_update
      description: Update a file in the agent's workspace.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/logs/:
    get:
      operationId: v1_projects_agents_logs_retrieve
      description: Retrieve logs for a specific agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/memory/:
    get:
      operationId: v1_projects_agents_memory_retrieve
      description: List memory items for a specific agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_agents_memory_create
      description: Add a memory item to an agent's memory.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_agents_memory_destroy
      description: Delete memory items for an agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/memory/export/:
    get:
      operationId: v1_projects_agents_memory_export_retrieve
      description: Export an agent's memory.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/memory/search/:
    post:
      operationId: v1_projects_agents_memory_search_create
      description: Search an agent's memory.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/run/:
    post:
      operationId: v1_projects_agents_run_create
      description: Run an agent with a message.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/runner/:
    post:
      operationId: v1_projects_agents_runner_create
      description: Execute code in an agent's workspace.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/stats/:
    get:
      operationId: v1_projects_agents_stats_retrieve
      description: Retrieve statistics for a specific agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/status/:
    get:
      operationId: v1_projects_agents_status_retrieve
      description: Retrieve an agent's status.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_agents_status_update
      description: Update an agent's status.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/agents/{agent_id}/workspace/:
    get:
      operationId: v1_projects_agents_workspace_retrieve
      description: Get an agent's workspace contents.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_agents_workspace_create
      description: Create a new directory in the agent's workspace.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_agents_workspace_destroy
      description: Delete a file or directory from the agent's workspace.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/analytics/agents/{agent_id}/:
    get:
      operationId: get_agent_analytics
      description: Get analytics data for a specific agent
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: query
          name: interval
          schema:
            type: string
          description: Interval for data points (e.g., '1h', '1d', '1w')
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for analytics (e.g., '24h', '7d', '30d', '90d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentAnalyticsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/analytics/cost/:
    get:
      operationId: get_cost_analytics
      description: Get cost analytics data
      parameters:
        - in: query
          name: agentId
          schema:
            type: string
          description: Filter by agent ID
        - in: query
          name: interval
          schema:
            type: string
          description: Interval for data points (e.g., '1h', '1d', '1w')
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for analytics (e.g., '24h', '7d', '30d', '90d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostAnalyticsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/analytics/performance/:
    get:
      operationId: get_performance_analytics
      description: Get system performance analytics data
      parameters:
        - in: query
          name: agentId
          schema:
            type: string
          description: Filter by agent ID
        - in: query
          name: interval
          schema:
            type: string
          description: Interval for data points (e.g., '1h', '1d', '1w')
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for analytics (e.g., '24h', '7d', '30d', '90d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceAnalyticsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/analytics/projects/{project_id}/:
    get:
      operationId: get_project_analytics
      description: Get analytics data for a specific project
      parameters:
        - in: query
          name: interval
          schema:
            type: string
          description: Interval for data points (e.g., '1h', '1d', '1w')
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for analytics (e.g., '24h', '7d', '30d', '90d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAnalyticsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/analytics/usage/:
    get:
      operationId: get_usage_analytics
      description: Get system-wide usage analytics data
      parameters:
        - in: query
          name: interval
          schema:
            type: string
          description: Interval for data points (e.g., '1h', '1d', '1w')
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for analytics (e.g., '24h', '7d', '30d', '90d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageAnalyticsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/analytics/users/{user_id}/:
    get:
      operationId: get_user_analytics
      description: Get analytics data for a specific user
      parameters:
        - in: query
          name: interval
          schema:
            type: string
          description: Interval for data points (e.g., '1h', '1d', '1w')
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for analytics (e.g., '24h', '7d', '30d', '90d')
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAnalyticsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/collaboration/messages/{message_id}/:
    get:
      operationId: v1_projects_collaboration_messages_retrieve
      description: Get a specific message from a collaboration session
      parameters:
        - in: path
          name: message_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_collaboration_messages_update
      description: Update a specific message in a collaboration session
      parameters:
        - in: path
          name: message_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_collaboration_messages_destroy
      description: Delete a specific message from a collaboration session
      parameters:
        - in: path
          name: message_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/collaboration/sessions/:
    get:
      operationId: v1_projects_collaboration_sessions_retrieve
      description: List collaboration sessions with optional filtering
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_collaboration_sessions_create
      description: Create a new collaboration session
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/collaboration/sessions/{session_id}/:
    get:
      operationId: v1_projects_collaboration_sessions_retrieve_2
      description: List all messages in a collaboration session
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: session_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_collaboration_sessions_create_2
      description: Add a message to a collaboration session
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: session_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_collaboration_sessions_update
      description: Update a specific collaboration session
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: session_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_collaboration_sessions_destroy
      description: Delete a specific collaboration session
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: session_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/collaboration/sessions/{session_id}/messages/:
    get:
      operationId: v1_projects_collaboration_sessions_messages_retrieve
      description: List messages from a specific sender in a collaboration session
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: session_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_collaboration_sessions_messages_create
      description: Perform an action on all messages from a sender in a session
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: session_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/conversations/:
    get:
      operationId: v1_projects_conversations_retrieve
      description: List all conversations with optional filtering
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_conversations_create
      description: Start a new conversation with an agent
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/conversations/{conversation_id}/:
    get:
      operationId: v1_projects_conversations_retrieve_2
      description: Get details of a specific conversation
      parameters:
        - in: path
          name: conversation_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_conversations_update
      description: Update a specific conversation
      parameters:
        - in: path
          name: conversation_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_conversations_destroy
      description: Delete a specific conversation
      parameters:
        - in: path
          name: conversation_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/conversations/{conversation_id}/messages/:
    get:
      operationId: v1_projects_conversations_messages_retrieve
      description: Get a specific message from a conversation
      parameters:
        - in: path
          name: conversation_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_conversations_messages_update
      description: Update a message in a conversation (e.g., for feedback)
      parameters:
        - in: path
          name: conversation_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_conversations_messages_destroy
      description: Delete a message from a conversation
      parameters:
        - in: path
          name: conversation_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/deployments/:
    get:
      operationId: v1_projects_deployments_retrieve
      description: List all deployments with optional filtering
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_deployments_create
      description: Create a new deployment
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/deployments/{deployment_id}/:
    get:
      operationId: v1_projects_deployments_retrieve_2
      description: Get a specific deployment
      parameters:
        - in: path
          name: deployment_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_deployments_update
      description: Update a deployment
      parameters:
        - in: path
          name: deployment_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_deployments_destroy
      description: Delete a deployment
      parameters:
        - in: path
          name: deployment_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/deployments/{deployment_id}/logs/:
    get:
      operationId: v1_projects_deployments_logs_retrieve
      description: Get logs for a specific deployment
      parameters:
        - in: path
          name: deployment_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/executions/:
    get:
      operationId: v1_projects_executions_retrieve
      description: List agent executions with optional filtering.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_executions_create
      description: Create a new execution for an agent.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/executions/{execution_id}/:
    get:
      operationId: v1_projects_executions_retrieve_2
      description: Retrieve details of a specific execution.
      parameters:
        - in: path
          name: execution_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_executions_destroy
      description: Cancel a running execution.
      parameters:
        - in: path
          name: execution_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/fine-tuning/datasets/:
    get:
      operationId: v1_projects_fine_tuning_datasets_retrieve
      description: List all fine-tuning datasets with optional filtering.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_fine_tuning_datasets_create
      description: Create a new fine-tuning dataset.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/fine-tuning/datasets/{dataset_id}/:
    get:
      operationId: get_dataset
      description: Get details of a specific fine-tuning dataset
      parameters:
        - in: path
          name: dataset_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDetailResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: update_dataset
      description: Update a fine-tuning dataset
      parameters:
        - in: path
          name: dataset_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatasetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateDatasetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateDatasetRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDatasetResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: delete_dataset
      description: Delete a fine-tuning dataset
      parameters:
        - in: path
          name: dataset_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Dataset deleted successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/fine-tuning/jobs/:
    get:
      operationId: list_fine_tuning_jobs
      description: List fine-tuning jobs
      parameters:
        - in: query
          name: modelId
          schema:
            type: string
          description: Filter by model ID
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: status
          schema:
            type: string
          description: Filter by job status
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJobListResponse'
          description: ''
    post:
      operationId: create_fine_tuning_job
      description: Create a new fine-tuning job
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFineTuningJobRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateFineTuningJobRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFineTuningJobRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFineTuningJobResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/fine-tuning/jobs/{job_id}/:
    get:
      operationId: get_fine_tuning_job
      description: Get details of a specific fine-tuning job
      parameters:
        - in: path
          name: job_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJobDetailResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/fine-tuning/jobs/{job_id}/cancel/:
    post:
      operationId: cancel_fine_tuning_job
      description: Cancel a fine-tuning job
      parameters:
        - in: path
          name: job_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelFineTuningJobResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/fine-tuning/models/:
    get:
      operationId: list_models
      description: List available fine-tuned models
      parameters:
        - in: query
          name: baseModel
          schema:
            type: string
          description: Filter by base model
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: status
          schema:
            type: string
          description: Filter by status
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelListResponse'
          description: ''
    post:
      operationId: create_model
      description: Create a new fine-tuned model
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateModelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateModelRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/fine-tuning/models/{model_id}/:
    get:
      operationId: get_model
      description: Get details of a specific fine-tuned model
      parameters:
        - in: path
          name: model_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDetailResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: update_model
      description: Update a fine-tuned model
      parameters:
        - in: path
          name: model_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateModelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateModelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateModelRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModelResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: delete_model
      description: Delete a fine-tuned model
      parameters:
        - in: path
          name: model_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Model deleted successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/integrations/:
    get:
      operationId: v1_projects_integrations_retrieve
      description: List available integrations with optional filtering
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_integrations_create
      description: Create a custom integration
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/integrations/{integration_id}/:
    get:
      operationId: v1_projects_integrations_retrieve_2
      description: Get details of a specific integration
      parameters:
        - in: path
          name: integration_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_integrations_update
      description: Update a specific integration
      parameters:
        - in: path
          name: integration_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_integrations_destroy
      description: Delete a specific integration
      parameters:
        - in: path
          name: integration_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/integrations/{integration_id}/auth/:
    get:
      operationId: v1_projects_integrations_auth_retrieve
      description: Get authentication information for an integration
      parameters:
        - in: path
          name: integration_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_integrations_auth_create
      description: Initiate or update authentication for an integration
      parameters:
        - in: path
          name: integration_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_integrations_auth_update
      description: Complete OAuth authentication flow
      parameters:
        - in: path
          name: integration_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_integrations_auth_destroy
      description: Remove authentication for an integration
      parameters:
        - in: path
          name: integration_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/knowledgebases/:
    get:
      operationId: v1_projects_knowledgebases_retrieve
      description: List all knowledge bases with optional filtering
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_knowledgebases_create
      description: Create a new knowledge base
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/knowledgebases/{kb_id}/:
    get:
      operationId: v1_projects_knowledgebases_retrieve_2
      description: Retrieve a specific knowledge base
      parameters:
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_knowledgebases_update
      description: Update a knowledge base
      parameters:
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_knowledgebases_destroy
      description: Delete a knowledge base
      parameters:
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/knowledgebases/{kb_id}/documents/:
    get:
      operationId: v1_projects_knowledgebases_documents_retrieve
      description: List documents in a knowledge base
      parameters:
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_knowledgebases_documents_create
      description: Add a document to a knowledge base
      parameters:
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/knowledgebases/{kb_id}/documents/{doc_id}/:
    get:
      operationId: v1_projects_knowledgebases_documents_retrieve_2
      description: Retrieve a specific document
      parameters:
        - in: path
          name: doc_id
          schema:
            type: string
          required: true
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_knowledgebases_documents_update
      description: Update a document
      parameters:
        - in: path
          name: doc_id
          schema:
            type: string
          required: true
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_knowledgebases_documents_destroy
      description: Delete a document
      parameters:
        - in: path
          name: doc_id
          schema:
            type: string
          required: true
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/knowledgebases/{kb_id}/search/:
    post:
      operationId: v1_projects_knowledgebases_search_create
      description: Search a knowledge base
      parameters:
        - in: path
          name: kb_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/marketplace/:
    get:
      operationId: v1_projects_marketplace_retrieve
      description: Search for agents in the marketplace.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/marketplace/{agent_id}/:
    get:
      operationId: v1_projects_marketplace_retrieve_2
      description: Get details of a specific marketplace agent.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_marketplace_create
      description: Install a marketplace agent into a project.
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/marketplace/categories/:
    get:
      operationId: v1_projects_marketplace_categories_retrieve
      description: Get all marketplace categories.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/members:
    get:
      operationId: list_project_members
      description: Returns all members of a project
      summary: List project members
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Project Members
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberListResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    post:
      operationId: add_project_member
      description: Adds a new member to a project
      summary: Add project member
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Project Members
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectMemberRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectMemberRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project or user not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/members/{member_id}/:
    put:
      operationId: update_project_member
      description: Updates a project member's role
      summary: Update project member
      parameters:
        - in: path
          name: member_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Project Members
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectMemberUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectMemberUpdateRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project or member not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    delete:
      operationId: remove_project_member
      description: Removes a member from a project
      summary: Remove project member
      parameters:
        - in: path
          name: member_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Project Members
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: Member removed successfully
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project or member not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/memory:
    get:
      operationId: v1_projects_memory_retrieve
      description: List all memories for a specific project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_memory_create
      description: Create a new memory for a specific project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/memory/collections/:
    get:
      operationId: v1_projects_memory_collections_retrieve
      description: List memory collections for a user.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_memory_collections_create
      description: Create a new memory collection.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/monitoring/alerts/:
    get:
      operationId: list_alerts
      description: List system alerts
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: service
          schema:
            type: string
          description: Filter by service name
        - in: query
          name: severity
          schema:
            type: string
          description: Filter by alert severity
        - in: query
          name: status
          schema:
            type: string
          description: Filter by alert status
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertListResponse'
          description: ''
    post:
      operationId: create_alert
      description: Create a new system alert
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAlertResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/monitoring/alerts/{alert_id}/:
    get:
      operationId: get_alert
      description: Get details of a specific alert
      parameters:
        - in: path
          name: alert_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertDetailResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: update_alert
      description: Update an alert
      parameters:
        - in: path
          name: alert_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlertRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateAlertRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateAlertRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAlertResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: delete_alert
      description: Delete an alert
      parameters:
        - in: path
          name: alert_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Alert deleted successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/monitoring/dashboard/:
    get:
      operationId: get_monitoring_dashboard
      description: Get monitoring dashboard data
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for dashboard data (e.g., '1h', '24h', '7d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
          description: ''
  /api/v1/projects/{project_id}/monitoring/discovery/:
    get:
      operationId: discover_services
      description: Discover available services
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDiscoveryResponse'
          description: ''
  /api/v1/projects/{project_id}/monitoring/health/:
    get:
      operationId: get_system_health
      description: Get overall system health status
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthResponse'
          description: ''
  /api/v1/projects/{project_id}/monitoring/logs/:
    get:
      operationId: get_logs
      description: Get system logs
      parameters:
        - in: query
          name: level
          schema:
            type: string
          description: Filter by log level
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of logs to return
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: query
          schema:
            type: string
          description: Text search query
        - in: query
          name: service
          schema:
            type: string
          description: Filter by service name
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for logs (e.g., '1h', '24h', '7d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
          description: ''
  /api/v1/projects/{project_id}/monitoring/metrics/:
    get:
      operationId: get_metrics
      description: Get system metrics
      parameters:
        - in: query
          name: interval
          schema:
            type: string
          description: Interval for data points (e.g., '1m', '5m', '1h')
        - in: query
          name: metric
          schema:
            type: string
          description: Filter by metric name
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: service
          schema:
            type: string
          description: Filter by service name
        - in: query
          name: timeframe
          schema:
            type: string
          description: Timeframe for metrics (e.g., '1h', '24h', '7d')
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
          description: ''
  /api/v1/projects/{project_id}/monitoring/services/health/:
    get:
      operationId: get_service_health
      description: Get health status for individual services
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: service
          schema:
            type: string
          description: Filter by service name
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealthResponse'
          description: ''
  /api/v1/projects/{project_id}/notifications/:
    get:
      operationId: v1_projects_notifications_retrieve
      description: Get notifications for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_notifications_update
      description: Mark all notifications as read for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/notifications/{notification_id}/:
    get:
      operationId: v1_projects_notifications_retrieve_2
      description: Get details for a specific notification
      parameters:
        - in: path
          name: notification_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_notifications_update_2
      description: Mark a specific notification as read
      parameters:
        - in: path
          name: notification_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_notifications_destroy
      description: Delete a specific notification
      parameters:
        - in: path
          name: notification_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/notifications/settings/:
    get:
      operationId: v1_projects_notifications_settings_retrieve
      description: Get notification preferences for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_notifications_settings_update
      description: Update notification preferences for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/projects/{project_id}/knowledge-bases/:
    get:
      operationId: list_project_knowledge_bases
      description: Returns knowledge bases for a specific project
      summary: List project knowledge bases
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: Offset for pagination
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: search
          schema:
            type: string
          description: Search term
        - in: query
          name: status
          schema:
            type: string
            enum:
              - active
              - building
              - error
          description: Filter by status
      tags:
        - Knowledge Bases
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseListResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    post:
      operationId: create_project_knowledge_base
      description: Creates a new knowledge base for a specific project
      summary: Create a project knowledge base
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Knowledge Bases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    put:
      operationId: update_project_knowledge_base
      description: Updates a specific knowledge base within a project
      summary: Update project knowledge base
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Knowledge Bases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseUpdateRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Permission denied
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    delete:
      operationId: delete_project_knowledge_base
      description: Deletes a specific knowledge base within a project
      summary: Delete project knowledge base
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Knowledge Bases
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Permission denied
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/projects/{project_id}/notifications/:
    get:
      operationId: v1_projects_projects_notifications_retrieve
      description: Get notifications related to a specific project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_projects_notifications_create
      description: Create a notification for a project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/prompts/:
    get:
      operationId: list_prompts
      description: Returns all prompts for a specific project
      summary: List prompts
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Prompts
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptListResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    post:
      operationId: create_prompt
      description: Creates a new prompt
      summary: Create prompt
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Prompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromptRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/prompts/{prompt_id}/:
    get:
      operationId: get_prompt
      description: Retrieves a specific prompt by ID (with project tenancy)
      summary: Get prompt
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: prompt_id
          schema:
            type: string
          required: true
      tags:
        - Prompts
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Tenancy violation
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Prompt not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    put:
      operationId: update_prompt
      description: Updates an existing prompt (with project tenancy)
      summary: Update prompt
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: prompt_id
          schema:
            type: string
          required: true
      tags:
        - Prompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromptUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptUpdateRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Prompt not found or tenancy violation
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    delete:
      operationId: delete_prompt
      description: Deletes an existing prompt (with project tenancy)
      summary: Delete prompt
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: prompt_id
          schema:
            type: string
          required: true
      tags:
        - Prompts
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: Prompt deleted successfully
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Prompt not found or tenancy violation
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/prompts/{prompt_id}/test/:
    post:
      operationId: test_prompt
      description: Test a prompt by rendering it with provided variables (with project tenancy)
      summary: Test prompt
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: prompt_id
          schema:
            type: string
          required: true
      tags:
        - Prompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptTestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromptTestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptTestRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptTestResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Prompt not found or tenancy violation
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/prompts/{prompt_id}/versions/:
    get:
      operationId: list_prompt_versions
      description: Returns all versions of a specific prompt (with project tenancy)
      summary: List prompt versions
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: prompt_id
          schema:
            type: string
          required: true
      tags:
        - Prompts
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptListResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Prompt not found or tenancy violation
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/prompts/templates/:
    get:
      operationId: list_prompt_templates
      description: Returns all available prompt templates for a specific project
      summary: List prompt templates
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - Prompt Templates
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptTemplateListResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/security/audit-logs/:
    get:
      operationId: get_project_audit_logs
      description: Retrieve and filter audit logs for a project
      summary: Get project audit logs
      parameters:
        - in: query
          name: action
          schema:
            type: string
          description: Filter logs by action type
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          description: End date for filtering logs (YYYY-MM-DD)
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: page_size
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
        - in: query
          name: resource_type
          schema:
            type: string
          description: Filter logs by resource type
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          description: Start date for filtering logs (YYYY-MM-DD)
        - in: query
          name: user_id
          schema:
            type: string
          description: Filter logs by user ID
      tags:
        - Project Security
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogListResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/security/policies/:
    get:
      operationId: v1_projects_security_policies_retrieve
      description: API endpoint for managing security policies
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_security_policies_create
      description: API endpoint for managing security policies
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/security/policies/{policy_id}/:
    put:
      operationId: update_project_security_policy
      description: Update an existing security policy for a project
      summary: Update security policy
      parameters:
        - in: path
          name: policy_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Project Security
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityPolicyUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SecurityPolicyUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SecurityPolicyUpdateRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityPolicyResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid input
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project or policy not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
    delete:
      operationId: delete_project_security_policy
      description: Delete a security policy from a project
      summary: Delete security policy
      parameters:
        - in: path
          name: policy_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: project_id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Project Security
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: Security policy deleted successfully
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Project or policy not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/projects/{project_id}/security/rules/:
    get:
      operationId: v1_projects_security_rules_retrieve
      description: List all security rules
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_security_rules_create
      description: Create a new security rule
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/security/rules/{rule_id}/:
    get:
      operationId: v1_projects_security_rules_retrieve_2
      description: API endpoint for retrieving, updating and deleting a security rule
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: rule_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_security_rules_update
      description: API endpoint for retrieving, updating and deleting a security rule
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: rule_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_security_rules_destroy
      description: API endpoint for retrieving, updating and deleting a security rule
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: rule_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/security/scans/:
    get:
      operationId: v1_projects_security_scans_retrieve
      description: API endpoint for performing and listing security scans
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_security_scans_create
      description: API endpoint for performing and listing security scans
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/security/scans/{scan_id}/:
    get:
      operationId: v1_projects_security_scans_retrieve_2
      description: API endpoint for retrieving and managing a specific security scan
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: scan_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_security_scans_destroy
      description: API endpoint for retrieving and managing a specific security scan
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: scan_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/settings/apikeys/:
    get:
      operationId: list_apikeys
      description: List API keys for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyListResponse'
          description: ''
    post:
      operationId: create_apikey
      description: Create a new API key
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
        required: true
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAPIKeyResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/settings/apikeys/{key_id}/:
    get:
      operationId: get_apikey
      description: Get details of a specific API key
      parameters:
        - in: path
          name: key_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyDetailResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: update_apikey
      description: Update an API key
      parameters:
        - in: path
          name: key_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAPIKeyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateAPIKeyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateAPIKeyRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAPIKeyResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: delete_apikey
      description: Delete an API key
      parameters:
        - in: path
          name: key_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: API key deleted successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/settings/keys/:
    get:
      operationId: list_settings_keys
      description: List available settings keys and their metadata
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by settings category
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: type
          schema:
            type: string
          description: Filter by settings type (user, organization)
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsKeysResponse'
          description: ''
  /api/v1/projects/{project_id}/settings/organization/:
    get:
      operationId: get_organization_settings
      description: Get organization settings
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSettingsResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: update_organization_settings
      description: Update organization settings
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationSettingsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationSettingsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationSettingsRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationSettingsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/settings/user/:
    get:
      operationId: get_user_settings
      description: Get settings for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsResponse'
          description: ''
    put:
      operationId: update_user_settings
      description: Update settings for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserSettingsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/projects/{project_id}/system/notifications/:
    post:
      operationId: v1_projects_system_notifications_create
      description: Create a system-wide notification (admin only)
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/teams/:
    get:
      operationId: v1_projects_teams_retrieve
      description: Get teams for the current user
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_teams_create
      description: Create a new team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/teams/{team_id}/:
    get:
      operationId: v1_projects_teams_retrieve_2
      description: Get details for a specific team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_teams_update
      description: Update a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_teams_destroy
      description: Delete a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/teams/{team_id}/members/:
    get:
      operationId: v1_projects_teams_members_retrieve
      description: List all members of a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_teams_members_create
      description: Add a member to a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_teams_members_destroy
      description: Remove a member from a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/teams/{team_id}/members/{user_id}/:
    put:
      operationId: v1_projects_teams_members_update
      description: Update a team member's role
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_teams_members_destroy_2
      description: Remove a member from a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/teams/{team_id}/projects/:
    get:
      operationId: v1_projects_teams_projects_retrieve
      description: Get projects for a specific team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_teams_projects_create
      description: Add a project to a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/teams/{team_id}/projects/{project_id}/:
    delete:
      operationId: v1_projects_teams_projects_destroy
      description: Remove a project from a team
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: team_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/tests/cases/:
    get:
      operationId: list_test_cases
      description: List test cases
      parameters:
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: tags
          schema:
            type: string
          description: Filter by tags (comma-separated)
        - in: query
          name: testSuiteId
          schema:
            type: string
          description: Filter by test suite ID
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: List of test cases
                schema:
                  type: object
                  properties:
                    testCases:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          description:
                            type: string
                          testSuiteId:
                            type: string
                          type:
                            type: string
                          tags:
                            type: array
                            items:
                              type: string
                          createdAt:
                            type: string
                            format: date-time
                          createdBy:
                            type: string
          description: ''
    post:
      operationId: create_test_case
      description: Create a new test case
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          required:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              name:
                type: string
              description:
                type: string
              testSuiteId:
                type: string
              type:
                type: string
              input:
                type: object
              expectedOutput:
                type: object
              tags:
                type: array
                items:
                  type: string
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Created test case
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    testSuiteId:
                      type: string
                    type:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
  /api/v1/projects/{project_id}/tests/cases/{case_id}/:
    get:
      operationId: get_test_case
      description: Get details of a specific test case
      parameters:
        - in: path
          name: case_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Test case details
                schema:
                  type: object
                  properties:
                    testCase:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        testSuiteId:
                          type: string
                        type:
                          type: string
                        input:
                          type: object
                        expectedOutput:
                          type: object
                        tags:
                          type: array
                          items:
                            type: string
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                        createdBy:
                          type: string
                        executionHistory:
                          type: array
                          items:
                            type: object
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test case not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
    put:
      operationId: update_test_case
      description: Update a test case
      parameters:
        - in: path
          name: case_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              name:
                type: string
              description:
                type: string
              type:
                type: string
              input:
                type: object
              expectedOutput:
                type: object
              tags:
                type: array
                items:
                  type: string
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Updated test case
                schema:
                  type: object
                  properties:
                    testCase:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        updatedAt:
                          type: string
                          format: date-time
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test case not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
    delete:
      operationId: delete_test_case
      description: Delete a test case
      parameters:
        - in: path
          name: case_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Test case deleted successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test case not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
  /api/v1/projects/{project_id}/tests/evaluate/:
    post:
      operationId: evaluate_agent
      description: Evaluate an agent against a test case or custom input
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              agentId:
                type: string
              testCaseId:
                type: string
              input:
                type: object
              evaluationCriteria:
                type: object
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Evaluation result
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    agentId:
                      type: string
                    testCaseId:
                      type: string
                    input:
                      type: object
                    output:
                      type: object
                    evaluation:
                      type: object
                    timestamp:
                      type: string
                      format: date-time
                    passed:
                      type: boolean
                    metrics:
                      type: object
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
  /api/v1/projects/{project_id}/tests/runs/:
    get:
      operationId: list_test_runs
      description: List test runs
      parameters:
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: query
          name: status
          schema:
            type: string
          description: Filter by status
        - in: query
          name: testSuiteId
          schema:
            type: string
          description: Filter by test suite ID
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: List of test runs
                schema:
                  type: object
                  properties:
                    testRuns:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          status:
                            type: string
                          testSuiteId:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          startedAt:
                            type: string
                            format: date-time
                          completedAt:
                            type: string
                            format: date-time
                          totalTestCases:
                            type: integer
                          passedTestCases:
                            type: integer
                          failedTestCases:
                            type: integer
                          projectId:
                            type: string
                          createdBy:
                            type: string
          description: ''
    post:
      operationId: create_test_run
      description: Create a new test run
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              name:
                type: string
              testSuiteId:
                type: string
              projectId:
                type: string
              description:
                type: string
              config:
                type: object
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Created test run
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    status:
                      type: string
                    testSuiteId:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
                    projectId:
                      type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
  /api/v1/projects/{project_id}/tests/runs/{run_id}/:
    get:
      operationId: get_test_run
      description: Get details of a specific test run
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: run_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Test run details
                schema:
                  type: object
                  properties:
                    testRun:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        status:
                          type: string
                        testSuiteId:
                          type: string
                        projectId:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
                        startedAt:
                          type: string
                          format: date-time
                        completedAt:
                          type: string
                          format: date-time
                        totalTestCases:
                          type: integer
                        passedTestCases:
                          type: integer
                        failedTestCases:
                          type: integer
                        results:
                          type: array
                          items:
                            type: object
                            properties:
                              testCaseId:
                                type: string
                              name:
                                type: string
                              status:
                                type: string
                              startTime:
                                type: string
                                format: date-time
                              endTime:
                                type: string
                                format: date-time
                              error:
                                type: string
                              metrics:
                                type: object
                        metrics:
                          type: object
                        createdBy:
                          type: string
                        config:
                          type: object
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test run not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
    delete:
      operationId: delete_test_run
      description: Delete a test run
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: run_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Test run deleted successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test run not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
  /api/v1/projects/{project_id}/tests/suites/:
    get:
      operationId: list_test_suites
      description: List test suites
      parameters:
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: List of test suites
                schema:
                  type: object
                  properties:
                    testSuites:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          description:
                            type: string
                          projectId:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          testCaseCount:
                            type: integer
                          createdBy:
                            type: string
          description: ''
    post:
      operationId: create_test_suite
      description: Create a new test suite
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              name:
                type: string
              description:
                type: string
              projectId:
                type: string
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Created test suite
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    projectId:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
  /api/v1/projects/{project_id}/tests/suites/{suite_id}/:
    get:
      operationId: get_test_suite
      description: Get details of a specific test suite
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: suite_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Test suite details
                schema:
                  type: object
                  properties:
                    testSuite:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        projectId:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                        testCases:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
                              type:
                                type: string
                        createdBy:
                          type: string
                        recentRuns:
                          type: array
                          items:
                            type: object
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test suite not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
    put:
      operationId: update_test_suite
      description: Update a test suite
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: suite_id
          schema:
            type: string
          required: true
      tags:
        - v1
      requestBody:
        content:
          type:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          properties:
            schema:
              name:
                type: string
              description:
                type: string
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Updated test suite
                schema:
                  type: object
                  properties:
                    testSuite:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        updatedAt:
                          type: string
                          format: date-time
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test suite not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
    delete:
      operationId: delete_test_suite
      description: Delete a test suite
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: suite_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Test suite deleted successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Test suite not found
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          description: ''
  /api/v1/projects/{project_id}/webhook-endpoints/:
    get:
      operationId: v1_projects_webhook_endpoints_retrieve
      description: List all webhook endpoints for a project.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_webhook_endpoints_create
      description: Create a new webhook endpoint.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/webhook-endpoints/{endpoint_id}/:
    get:
      operationId: v1_projects_webhook_endpoints_retrieve_2
      description: Get a webhook endpoint by ID.
      parameters:
        - in: path
          name: endpoint_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_webhook_endpoints_update
      description: Update a webhook endpoint.
      parameters:
        - in: path
          name: endpoint_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_webhook_endpoints_destroy
      description: Delete a webhook endpoint.
      parameters:
        - in: path
          name: endpoint_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/webhook-endpoints/{endpoint_id}/events/:
    get:
      operationId: v1_projects_webhook_endpoints_events_retrieve
      description: List events for a webhook endpoint.
      parameters:
        - in: path
          name: endpoint_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/webhook-event-types:
    get:
      operationId: v1_projects_webhook_event_types_retrieve
      description: Get all available webhook event types.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/webhook-events/{event_id}/:
    get:
      operationId: v1_projects_webhook_events_retrieve
      description: Get a webhook event by ID.
      parameters:
        - in: path
          name: event_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_webhook_events_create
      description: Retry a failed webhook event.
      parameters:
        - in: path
          name: event_id
          schema:
            type: string
          required: true
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/webhooks/:
    get:
      operationId: v1_projects_webhooks_retrieve
      description: List all webhooks for a project.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_webhooks_create
      description: Create a new webhook.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/webhooks/{webhook_id}/:
    get:
      operationId: v1_projects_webhooks_retrieve_2
      description: Get a webhook by ID.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_webhooks_update
      description: Update a webhook.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_webhooks_destroy
      description: Delete a webhook.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/webhooks/{webhook_id}/logs/:
    get:
      operationId: v1_projects_webhooks_logs_retrieve
      description: List logs for a webhook.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/webhooks/{webhook_id}/test/:
    post:
      operationId: v1_projects_webhooks_test_create
      description: Test a webhook by sending a test event.
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/workflows:
    get:
      operationId: v1_projects_workflows_retrieve
      description: List workflows for a specific project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_workflows_create
      description: Create a new workflow for a specific project
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/workflows/:
    get:
      operationId: v1_projects_workflows_retrieve_2
      description: List all workflows
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_workflows_create_2
      description: Create a new workflow
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/projects/{project_id}/workflows/{workflow_id}/:
    get:
      operationId: v1_projects_workflows_retrieve_3
      description: Get a specific workflow
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: workflow_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_projects_workflows_update
      description: Update a workflow
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: workflow_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_workflows_destroy
      description: Delete a workflow
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: workflow_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/workflows/{workflow_id}/run/:
    get:
      operationId: v1_projects_workflows_run_retrieve
      description: Get details of a workflow run or list all runs for a workflow
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: workflow_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_workflows_run_create
      description: Start a new workflow run or perform actions on an existing run
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: workflow_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_workflows_run_destroy
      description: Delete a workflow run
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: workflow_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/workflows/runs/{run_id}/:
    get:
      operationId: v1_projects_workflows_runs_retrieve
      description: Get details of a workflow run or list all runs for a workflow
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: run_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_projects_workflows_runs_create
      description: Start a new workflow run or perform actions on an existing run
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: run_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_projects_workflows_runs_destroy
      description: Delete a workflow run
      parameters:
        - in: path
          name: project_id
          schema:
            type: string
          required: true
        - in: path
          name: run_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/default/:
    get:
      operationId: get_default_project
      description: Returns the default project for the user
      summary: Get default project
      tags:
        - Projects
      security:
        - jwtAuth: []
        - cookieAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default project not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
  /api/v1/users/:
    get:
      operationId: v1_users_retrieve
      description: List all users. Admin access only.
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_users_create
      description: Create a new user. Admin access only.
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/{user_id}:
    get:
      operationId: v1_users_retrieve_2
      description: Get details for a specific user. Admin access only.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_users_update
      description: Update a specific user. Admin access only.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_users_destroy
      description: Delete a specific user. Admin access only.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/{user_id}/password:
    put:
      operationId: v1_users_password_update
      description: Update a user's password
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/{user_id}/projects:
    get:
      operationId: v1_users_projects_retrieve
      description: List all projects for a specific user. Admin access only.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/profile:
    get:
      operationId: v1_users_profile_retrieve
      description: Get the current user's profile.
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_users_profile_update
      description: Update the current user's profile.
      tags:
        - v1
      security:
        - jwtAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    APIKeyDetailResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        prefix:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        lastUsed:
          type: string
          format: date-time
        scopes:
          type: array
          items:
            type: string
        status:
          type: string
        usageStats:
          type: object
          additionalProperties: {}
      required:
        - createdAt
        - expiresAt
        - id
        - lastUsed
        - name
        - prefix
        - scopes
        - status
        - usageStats
    APIKeyInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        prefix:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        lastUsed:
          type: string
          format: date-time
        scopes:
          type: array
          items:
            type: string
        status:
          type: string
      required:
        - createdAt
        - expiresAt
        - id
        - lastUsed
        - name
        - prefix
        - scopes
        - status
    APIKeyListResponse:
      type: object
      properties:
        apiKeys:
          type: array
          items:
            $ref: '#/components/schemas/APIKeyInfo'
      required:
        - apiKeys
    AgentAnalyticsResponse:
      type: object
      properties:
        usage:
          $ref: '#/components/schemas/AgentUsageStats'
        performance:
          $ref: '#/components/schemas/AgentPerformanceStats'
        cost:
          $ref: '#/components/schemas/AgentCostStats'
        interactions:
          $ref: '#/components/schemas/AgentInteractionsStats'
      required:
        - cost
        - interactions
        - performance
        - usage
    AgentCostInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        cost:
          type: number
          format: double
        percentage:
          type: number
          format: double
      required:
        - cost
        - id
        - name
        - percentage
    AgentCostStats:
      type: object
      properties:
        totalCost:
          type: number
          format: double
        costOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        costBreakdown:
          type: object
          additionalProperties: {}
      required:
        - costBreakdown
        - costOverTime
        - totalCost
    AgentInteractionsStats:
      type: object
      properties:
        topQueries:
          type: array
          items:
            type: string
        topResponses:
          type: array
          items:
            type: string
        queryCategories:
          type: object
          additionalProperties:
            type: integer
      required:
        - queryCategories
        - topQueries
        - topResponses
    AgentListResponse:
      type: object
      properties:
        agents:
          type: array
          items:
            $ref: '#/components/schemas/AgentResponse'
          description: List of agents
      required:
        - agents
    AgentPerformanceInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        avgResponseTime:
          type: number
          format: double
        successRate:
          type: number
          format: double
      required:
        - avgResponseTime
        - id
        - name
        - successRate
    AgentPerformanceStats:
      type: object
      properties:
        averageResponseTime:
          type: number
          format: double
        p95ResponseTime:
          type: number
          format: double
        successRate:
          type: number
          format: double
        responseTimeOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
      required:
        - averageResponseTime
        - p95ResponseTime
        - responseTimeOverTime
        - successRate
    AgentRequest:
      type: object
      properties:
        name:
          type: string
          description: Agent name
        description:
          type: string
          description: Agent description
        type:
          type: string
          description: Agent type
        model:
          type: string
          description: LLM model to use
        tools:
          type: array
          items:
            $ref: '#/components/schemas/AgentTool'
          description: List of tools for the agent
        metadata:
          description: Additional agent metadata
      required:
        - description
        - model
        - name
        - type
    AgentResponse:
      type: object
      properties:
        id:
          type: string
          description: Agent ID
        project_id:
          type: string
          description: Project ID this agent belongs to
        name:
          type: string
          description: Agent name
        description:
          type: string
          description: Agent description
        type:
          type: string
          description: Agent type
        model:
          type: string
          description: LLM model used
        tools:
          type: array
          items:
            $ref: '#/components/schemas/AgentTool'
          description: List of tools for the agent
        metadata:
          description: Additional agent metadata
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - created_at
        - description
        - id
        - model
        - name
        - project_id
        - tools
        - type
        - updated_at
    AgentTool:
      type: object
      properties:
        id:
          type: string
          description: Tool ID
        name:
          type: string
          description: Tool name
        description:
          type: string
          description: Tool description
        parameters:
          description: Tool parameters schema
      required:
        - name
    AgentUsageInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        requests:
          type: integer
        percentage:
          type: number
          format: double
      required:
        - id
        - name
        - percentage
        - requests
    AgentUsageStats:
      type: object
      properties:
        totalRequests:
          type: integer
        uniqueUsers:
          type: integer
        requestsOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
      required:
        - requestsOverTime
        - totalRequests
        - uniqueUsers
    AlertDetailResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        message:
          type: string
        severity:
          type: string
        status:
          type: string
        service:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time
        resolvedBy:
          type: string
        metadata:
          type: object
          additionalProperties: {}
      required:
        - createdAt
        - id
        - message
        - metadata
        - resolvedAt
        - resolvedBy
        - service
        - severity
        - status
        - title
        - updatedAt
    AlertInfo:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        message:
          type: string
        severity:
          type: string
        status:
          type: string
        service:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - createdAt
        - id
        - message
        - service
        - severity
        - status
        - title
        - updatedAt
    AlertListResponse:
      type: object
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertInfo'
      required:
        - alerts
    AlertSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        severity:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - createdAt
        - id
        - severity
        - status
        - title
    AuditLogListResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogResponse'
          description: List of audit log entries
        total:
          type: integer
          description: Total number of log entries
        page:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Number of entries per page
      required:
        - logs
        - page
        - page_size
        - total
    AuditLogResponse:
      type: object
      properties:
        id:
          type: string
          description: Log entry ID
        project_id:
          type: string
          description: Project ID
        user_id:
          type: string
          description: User ID who performed the action
        user_name:
          type: string
          description: User name
        action:
          type: string
          description: Action performed
        resource_type:
          type: string
          description: Type of resource affected
        resource_id:
          type: string
          description: ID of resource affected
        details:
          description: Additional details about the action
        timestamp:
          type: string
          format: date-time
          description: When the action occurred
        ip_address:
          type: string
          description: IP address of the user
        user_agent:
          type: string
          description: User agent of the client
      required:
        - action
        - details
        - id
        - project_id
        - resource_id
        - resource_type
        - timestamp
        - user_id
        - user_name
    CancelFineTuningJobResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - message
        - success
    ComponentHealth:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        lastChecked:
          type: string
          format: date-time
      required:
        - lastChecked
        - message
        - status
    CostAnalyticsResponse:
      type: object
      properties:
        totalCost:
          type: number
          format: double
        costBreakdown:
          type: object
          additionalProperties:
            type: number
            format: double
        costOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        costByProject:
          type: array
          items:
            $ref: '#/components/schemas/ProjectCostInfo'
        costByAgent:
          type: array
          items:
            $ref: '#/components/schemas/AgentCostInfo'
        costByModel:
          type: object
          additionalProperties:
            type: number
            format: double
        projectedCosts:
          type: object
          additionalProperties: {}
      required:
        - costBreakdown
        - costByAgent
        - costByModel
        - costByProject
        - costOverTime
        - projectedCosts
        - totalCost
    CreateAPIKeyRequest:
      type: object
      properties:
        name:
          type: string
        scopes:
          type: array
          items:
            type: string
        expiresIn:
          type: integer
      required:
        - name
    CreateAPIKeyResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        apiKey:
          type: string
        prefix:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        scopes:
          type: array
          items:
            type: string
      required:
        - apiKey
        - createdAt
        - expiresAt
        - id
        - name
        - prefix
        - scopes
    CreateAlertRequest:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
        severity:
          type: string
        service:
          type: string
        metadata:
          type: object
          additionalProperties: {}
      required:
        - message
        - service
        - severity
        - title
    CreateAlertResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        message:
          type: string
        severity:
          type: string
        status:
          type: string
        service:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - createdAt
        - id
        - message
        - service
        - severity
        - status
        - title
    CreateFineTuningJobRequest:
      type: object
      properties:
        modelId:
          type: string
        datasetId:
          type: string
        hyperparameters:
          type: object
          additionalProperties: {}
        projectId:
          type: string
      required:
        - datasetId
        - modelId
    CreateFineTuningJobResponse:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        modelId:
          type: string
        datasetId:
          type: string
        projectId:
          type: string
      required:
        - createdAt
        - datasetId
        - id
        - modelId
        - projectId
        - status
    CreateModelRequest:
      type: object
      properties:
        name:
          type: string
        baseModel:
          type: string
        projectId:
          type: string
        datasetId:
          type: string
        hyperparameters:
          type: object
          additionalProperties: {}
        description:
          type: string
      required:
        - baseModel
        - datasetId
        - name
    CreateModelResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        baseModel:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        fineTuningJobId:
          type: string
        projectId:
          type: string
      required:
        - baseModel
        - createdAt
        - fineTuningJobId
        - id
        - name
        - projectId
        - status
    DashboardResponse:
      type: object
      properties:
        systemHealth:
          $ref: '#/components/schemas/SystemHealthSummary'
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertSummary'
        metrics:
          type: object
          additionalProperties: {}
        resourceUsage:
          type: object
          additionalProperties: {}
        serviceStatus:
          type: object
          additionalProperties: {}
      required:
        - alerts
        - metrics
        - resourceUsage
        - serviceStatus
        - systemHealth
    DatasetDetailResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        format:
          type: string
        size:
          type: integer
        recordCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        projectId:
          type: string
        description:
          type: string
        source:
          type: string
        metadata:
          type: object
          additionalProperties: {}
        userId:
          type: string
      required:
        - createdAt
        - description
        - format
        - id
        - metadata
        - name
        - projectId
        - recordCount
        - size
        - source
        - userId
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
    FineTuningJobDetailResponse:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        modelId:
          type: string
        datasetId:
          type: string
        projectId:
          type: string
        hyperparameters:
          type: object
          additionalProperties: {}
        metrics:
          type: object
          additionalProperties: {}
        progress:
          type: number
          format: double
        estimatedCompletionTime:
          type: string
          format: date-time
        errorMessage:
          type: string
        userId:
          type: string
      required:
        - createdAt
        - datasetId
        - errorMessage
        - estimatedCompletionTime
        - hyperparameters
        - id
        - metrics
        - modelId
        - progress
        - projectId
        - status
        - updatedAt
        - userId
    FineTuningJobInfo:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        modelId:
          type: string
        projectId:
          type: string
        progress:
          type: number
          format: double
        estimatedCompletionTime:
          type: string
          format: date-time
      required:
        - createdAt
        - estimatedCompletionTime
        - id
        - modelId
        - progress
        - projectId
        - status
        - updatedAt
    FineTuningJobListResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJobInfo'
      required:
        - jobs
    KnowledgeBaseListResponse:
      type: object
      description: Knowledge base list response serializer
      properties:
        knowledge_bases:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeBaseResponse'
          description: List of knowledge bases
        total:
          type: integer
          description: Total count of knowledge bases matching criteria
      required:
        - knowledge_bases
        - total
    KnowledgeBaseRequest:
      type: object
      description: Knowledge base request serializer for creating knowledge bases
      properties:
        name:
          type: string
          description: Knowledge base name
          maxLength: 255
        description:
          type: string
          description: Knowledge base description
        type:
          type: string
          description: Knowledge base type (e.g., 'vector', 'hybrid')
          maxLength: 50
        config:
          description: Knowledge base configuration
        metadata:
          description: Additional metadata
      required:
        - name
        - type
    KnowledgeBaseResponse:
      type: object
      description: Knowledge base response serializer
      properties:
        id:
          type: string
          description: Knowledge base ID
        name:
          type: string
          description: Knowledge base name
        description:
          type: string
          description: Knowledge base description
        type:
          type: string
          description: Knowledge base type
        config:
          description: Knowledge base configuration
        metadata:
          description: Additional metadata
        status:
          type: string
          description: Knowledge base status
        document_count:
          type: integer
          description: Number of documents in the knowledge base
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        created_by:
          type: string
          description: Creator user ID
        project_id:
          type: string
          description: Project ID the knowledge base belongs to
      required:
        - config
        - created_at
        - created_by
        - description
        - document_count
        - id
        - metadata
        - name
        - project_id
        - status
        - type
        - updated_at
    KnowledgeBaseUpdateRequest:
      type: object
      description: Knowledge base update request serializer
      properties:
        name:
          type: string
          description: Knowledge base name
          maxLength: 255
        description:
          type: string
          description: Knowledge base description
        config:
          description: Knowledge base configuration
        metadata:
          description: Additional metadata
    LogEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          type: string
        service:
          type: string
        message:
          type: string
        metadata:
          type: object
          additionalProperties: {}
      required:
        - level
        - message
        - metadata
        - service
        - timestamp
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - access_token
        - refresh_token
        - user
    LogoutRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token
    LogoutResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    LogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
        total:
          type: integer
      required:
        - logs
        - total
    MFAChallengeRequest:
      type: object
      properties:
        mfa_token:
          type: string
          description: Temporary MFA token from login response
        verification_code:
          type: string
          description: Verification code from authenticator app
        device_type:
          type: string
          default: totp
          description: Type of MFA device used for verification
      required:
        - mfa_token
        - verification_code
    MFADisableResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
        disabled_devices:
          type: integer
          description: Number of disabled devices
      required:
        - message
    MFASetupResponse:
      type: object
      properties:
        secret:
          type: string
          description: Secret key for TOTP
        qr_code_base64:
          type: string
          description: Base64 encoded QR code image
        device_id:
          type: string
          description: ID of the created MFA device
        device_type:
          type: string
          readOnly: true
          default: totp
          description: Type of MFA device
      required:
        - device_id
        - device_type
        - qr_code_base64
        - secret
    MFAVerifyRequest:
      type: object
      properties:
        verification_code:
          type: string
          description: Verification code from authenticator app
        device_id:
          type: string
          description: Optional device ID if multiple devices exist
      required:
        - verification_code
    MFAVerifyResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
        device_id:
          type: string
          description: ID of the activated MFA device
        device_type:
          type: string
          description: Type of MFA device
        status:
          type: string
          description: Status of MFA device
      required:
        - message
    MetricDataPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: number
          format: double
      required:
        - timestamp
        - value
    MetricsResponse:
      type: object
      properties:
        metrics:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/MetricDataPoint'
        summary:
          type: object
          additionalProperties: {}
      required:
        - metrics
        - summary
    ModelDetailResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        baseModel:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        fineTuningJobId:
          type: string
        projectId:
          type: string
        metrics:
          type: object
          additionalProperties: {}
        description:
          type: string
        hyperparameters:
          type: object
          additionalProperties: {}
        userId:
          type: string
      required:
        - baseModel
        - createdAt
        - description
        - fineTuningJobId
        - hyperparameters
        - id
        - metrics
        - name
        - projectId
        - status
        - updatedAt
        - userId
    ModelInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        baseModel:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        fineTuningJobId:
          type: string
        projectId:
          type: string
      required:
        - baseModel
        - createdAt
        - fineTuningJobId
        - id
        - name
        - projectId
        - status
        - updatedAt
    ModelListResponse:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/ModelInfo'
      required:
        - models
    OrganizationSettingsResponse:
      type: object
      properties:
        settings:
          type: object
          additionalProperties: {}
        security:
          type: object
          additionalProperties: {}
        branding:
          type: object
          additionalProperties: {}
        integrations:
          type: object
          additionalProperties: {}
        limits:
          type: object
          additionalProperties: {}
      required:
        - branding
        - integrations
        - limits
        - security
        - settings
    PasswordResetConfirm:
      type: object
      properties:
        token:
          type: string
          description: Password reset token
        password:
          type: string
          writeOnly: true
          description: New password (min 8 chars, must contain uppercase, lowercase, and a digit)
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)
      required:
        - password
        - token
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    PerformanceAnalyticsResponse:
      type: object
      properties:
        averageResponseTime:
          type: number
          format: double
        p95ResponseTime:
          type: number
          format: double
        p99ResponseTime:
          type: number
          format: double
        successRate:
          type: number
          format: double
        responseTimeOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        successRateOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        performanceByAgent:
          type: array
          items:
            $ref: '#/components/schemas/AgentPerformanceInfo'
        errorRates:
          type: object
          additionalProperties:
            type: number
            format: double
      required:
        - averageResponseTime
        - errorRates
        - p95ResponseTime
        - p99ResponseTime
        - performanceByAgent
        - responseTimeOverTime
        - successRate
        - successRateOverTime
    ProfileUpdate:
      type: object
      properties:
        name:
          type: string
          description: User full name
        email:
          type: string
          format: email
          description: User email address
        username:
          type: string
          nullable: true
          description: Optional username
        preferences:
          description: User preferences as JSON object
    ProjectAnalyticsResponse:
      type: object
      properties:
        usage:
          $ref: '#/components/schemas/ProjectUsageStats'
        performance:
          $ref: '#/components/schemas/ProjectPerformanceStats'
        cost:
          $ref: '#/components/schemas/ProjectCostStats'
        users:
          $ref: '#/components/schemas/ProjectUserStats'
      required:
        - cost
        - performance
        - usage
        - users
    ProjectCostInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        cost:
          type: number
          format: double
        percentage:
          type: number
          format: double
      required:
        - cost
        - id
        - name
        - percentage
    ProjectCostStats:
      type: object
      properties:
        totalCost:
          type: number
          format: double
        costOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        costByAgent:
          type: object
          additionalProperties:
            type: number
            format: double
        costByUser:
          type: object
          additionalProperties:
            type: number
            format: double
        projectedCosts:
          type: object
          additionalProperties: {}
      required:
        - costByAgent
        - costByUser
        - costOverTime
        - projectedCosts
        - totalCost
    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResponse'
          description: List of projects
        total:
          type: integer
          description: Total number of projects
      required:
        - projects
    ProjectMemberListResponse:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMemberResponse'
          description: List of project members
      required:
        - members
    ProjectMemberRequest:
      type: object
      properties:
        user_id:
          type: string
          description: User ID to add as project member
        role:
          type: string
          description: Role for the member (e.g., admin, member)
          pattern: ^(admin|member)$
      required:
        - role
        - user_id
    ProjectMemberResponse:
      type: object
      properties:
        id:
          type: string
          description: Member ID
        user_id:
          type: string
          description: User ID
        user_name:
          type: string
          description: User name
        user_email:
          type: string
          description: User email
        role:
          type: string
          description: Member role in the project
        joined_at:
          type: string
          format: date-time
          description: When the user joined the project
      required:
        - id
        - joined_at
        - role
        - user_email
        - user_id
        - user_name
    ProjectMemberUpdateRequest:
      type: object
      properties:
        role:
          type: string
          description: New role for the member
          pattern: ^(admin|member)$
      required:
        - role
    ProjectPerformanceStats:
      type: object
      properties:
        averageResponseTime:
          type: number
          format: double
        successRate:
          type: number
          format: double
        performanceByAgent:
          type: object
          additionalProperties: {}
      required:
        - averageResponseTime
        - performanceByAgent
        - successRate
    ProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: Project name
        description:
          type: string
          description: Project description
        status:
          allOf:
            - $ref: '#/components/schemas/Status7c4Enum'
          default: active
          description: |-
            Project status

            * `active` - active
            * `inactive` - inactive
            * `archived` - archived
        metadata:
          description: Additional project metadata
      required:
        - name
    ProjectResponse:
      type: object
      properties:
        id:
          type: string
          description: Project ID
        name:
          type: string
          description: Project name
        description:
          type: string
          nullable: true
          description: Project description
        status:
          type: string
          description: Project status
        owner_id:
          type: string
          description: Project owner ID
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        metadata:
          description: Additional project metadata
      required:
        - created_at
        - id
        - name
        - owner_id
        - status
        - updated_at
    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Project name
        description:
          type: string
          nullable: true
          description: Project description
        status:
          allOf:
            - $ref: '#/components/schemas/Status7c4Enum'
          description: |-
            Project status

            * `active` - active
            * `inactive` - inactive
            * `archived` - archived
        metadata:
          description: Additional project metadata
    ProjectUsageStats:
      type: object
      properties:
        totalRequests:
          type: integer
        uniqueUsers:
          type: integer
        activeAgents:
          type: integer
        requestsOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        requestsByAgent:
          type: object
          additionalProperties:
            type: integer
      required:
        - activeAgents
        - requestsByAgent
        - requestsOverTime
        - totalRequests
        - uniqueUsers
    ProjectUserStats:
      type: object
      properties:
        topUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserStats'
        userActivity:
          type: object
          additionalProperties: {}
      required:
        - topUsers
        - userActivity
    PromptListResponse:
      type: object
      properties:
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/PromptResponse'
          description: List of prompts
      required:
        - prompts
    PromptRequest:
      type: object
      properties:
        name:
          type: string
          description: Prompt name
        content:
          type: string
          description: Prompt content/template
        description:
          type: string
          description: Prompt description
        projectId:
          type: string
          description: Project ID this prompt belongs to
        variables:
          type: array
          items:
            $ref: '#/components/schemas/PromptVariable'
          description: Variables used in the prompt
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing the prompt
      required:
        - content
        - name
        - projectId
    PromptResponse:
      type: object
      properties:
        id:
          type: string
          description: Prompt ID
        name:
          type: string
          description: Prompt name
        content:
          type: string
          description: Prompt content/template
        description:
          type: string
          nullable: true
          description: Prompt description
        project_id:
          type: string
          description: Project ID this prompt belongs to
        variables:
          type: array
          items:
            $ref: '#/components/schemas/PromptVariable'
          description: Variables used in the prompt
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing the prompt
        user_id:
          type: string
          description: User who created the prompt
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - content
        - created_at
        - id
        - name
        - project_id
        - updated_at
        - user_id
    PromptTemplateListResponse:
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: '#/components/schemas/PromptTemplateResponse'
          description: List of prompt templates
      required:
        - templates
    PromptTemplateResponse:
      type: object
      properties:
        id:
          type: string
          description: Template ID
        name:
          type: string
          description: Template name
        description:
          type: string
          description: Template description
        content:
          type: string
          description: Template content
        variables:
          type: array
          items:
            $ref: '#/components/schemas/PromptVariable'
          description: Variables used in the template
        category:
          type: string
          description: Template category
      required:
        - content
        - id
        - name
    PromptTestRequest:
      type: object
      properties:
        variables:
          type: object
          additionalProperties:
            type: string
          description: Variables to substitute in the prompt
    PromptTestResponse:
      type: object
      properties:
        rendered_content:
          type: string
          description: Rendered prompt content
        variables_used:
          type: array
          items:
            type: string
          description: Variables that were used in rendering
        variables_missing:
          type: array
          items:
            type: string
          description: Variables that were missing values
      required:
        - rendered_content
    PromptUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Prompt name
        content:
          type: string
          description: Prompt content/template
        description:
          type: string
          nullable: true
          description: Prompt description
        projectId:
          type: string
          description: Project ID this prompt belongs to (required for tenancy)
        variables:
          type: array
          items:
            $ref: '#/components/schemas/PromptVariable'
          description: Variables used in the prompt
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing the prompt
      required:
        - projectId
    PromptVariable:
      type: object
      properties:
        name:
          type: string
          description: Variable name
        description:
          type: string
          description: Variable description
        default_value:
          type: string
          description: Default value for the variable
      required:
        - name
    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token
    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
      required:
        - access_token
        - refresh_token
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          writeOnly: true
          description: Password (min 8 chars, must contain uppercase, lowercase, and a digit)
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)
        name:
          type: string
          description: User full name
        username:
          type: string
          description: Optional username
          pattern: ^[a-zA-Z0-9_]+$
        preferences:
          description: User preferences
      required:
        - email
        - name
        - password
    RegisterResponse:
      type: object
      properties:
        id:
          type: string
          description: User UUID
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        role:
          type: string
          description: User role
        status:
          type: string
          description: User status
        date_joined:
          type: string
          format: date-time
          description: Registration timestamp
      required:
        - date_joined
        - email
        - id
        - name
        - role
        - status
    SecurityPolicyResponse:
      type: object
      properties:
        id:
          type: string
          description: Policy ID
        project_id:
          type: string
          description: Project ID
        name:
          type: string
          description: Policy name
        description:
          type: string
          description: Policy description
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SecurityPolicyRule'
          description: Policy rules
        status:
          type: string
          description: Policy status
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - created_at
        - description
        - id
        - name
        - project_id
        - rules
        - status
        - updated_at
    SecurityPolicyRule:
      type: object
      properties:
        type:
          type: string
          description: Rule type
        condition:
          type: string
          description: Rule condition
        action:
          type: string
          description: Rule action
      required:
        - action
        - condition
        - type
    SecurityPolicyUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Policy name
        description:
          type: string
          description: Policy description
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SecurityPolicyRule'
          description: Policy rules
        status:
          allOf:
            - $ref: '#/components/schemas/SecurityPolicyUpdateRequestStatusEnum'
          description: |-
            Policy status

            * `active` - active
            * `inactive` - inactive
    SecurityPolicyUpdateRequestStatusEnum:
      enum:
        - active
        - inactive
      type: string
      description: |-
        * `active` - active
        * `inactive` - inactive
    ServiceDiscoveryResponse:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceInfo'
      required:
        - services
    ServiceHealth:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        message:
          type: string
        lastChecked:
          type: string
          format: date-time
        metrics:
          type: object
          additionalProperties: {}
        dependencies:
          type: array
          items:
            type: string
      required:
        - dependencies
        - lastChecked
        - message
        - metrics
        - name
        - status
    ServiceHealthResponse:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceHealth'
      required:
        - services
    ServiceInfo:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        version:
          type: string
        endpoints:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: {}
      required:
        - endpoints
        - metadata
        - name
        - status
        - version
    SettingKeyInfo:
      type: object
      properties:
        type:
          type: string
        category:
          type: string
        description:
          type: string
        dataType:
          type: string
        defaultValue:
          type: string
        options:
          type: array
          items: {}
        validation:
          type: object
          additionalProperties: {}
      required:
        - category
        - dataType
        - defaultValue
        - description
        - type
    SettingsKeysResponse:
      type: object
      properties:
        keys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SettingKeyInfo'
      required:
        - keys
    Status7c4Enum:
      enum:
        - active
        - inactive
        - archived
      type: string
      description: |-
        * `active` - active
        * `inactive` - inactive
        * `archived` - archived
    SystemHealthResponse:
      type: object
      properties:
        status:
          type: string
        components:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentHealth'
        version:
          type: string
        uptime:
          type: number
          format: double
      required:
        - components
        - status
        - uptime
        - version
    SystemHealthSummary:
      type: object
      properties:
        status:
          type: string
        componentsStatus:
          type: object
          additionalProperties: {}
      required:
        - componentsStatus
        - status
    TimeSeriesDataPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: integer
      required:
        - timestamp
        - value
    UpdateAPIKeyRequest:
      type: object
      properties:
        name:
          type: string
        scopes:
          type: array
          items:
            type: string
        status:
          type: string
    UpdateAPIKeyResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        scopes:
          type: array
          items:
            type: string
        status:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - scopes
        - status
        - updatedAt
    UpdateAlertRequest:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        severity:
          type: string
        metadata:
          type: object
          additionalProperties: {}
    UpdateAlertResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        message:
          type: string
        severity:
          type: string
        status:
          type: string
        service:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - message
        - service
        - severity
        - status
        - title
        - updatedAt
    UpdateDatasetRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        projectId:
          type: string
    UpdateDatasetResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        format:
          type: string
        size:
          type: integer
        recordCount:
          type: integer
        updatedAt:
          type: string
          format: date-time
        description:
          type: string
        projectId:
          type: string
      required:
        - description
        - format
        - id
        - name
        - projectId
        - recordCount
        - size
        - updatedAt
    UpdateModelRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        projectId:
          type: string
    UpdateModelResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        baseModel:
          type: string
        status:
          type: string
        updatedAt:
          type: string
          format: date-time
        description:
          type: string
        projectId:
          type: string
      required:
        - baseModel
        - description
        - id
        - name
        - projectId
        - status
        - updatedAt
    UpdateOrganizationSettingsRequest:
      type: object
      properties:
        settings:
          type: object
          additionalProperties: {}
        security:
          type: object
          additionalProperties: {}
        branding:
          type: object
          additionalProperties: {}
        integrations:
          type: object
          additionalProperties: {}
        limits:
          type: object
          additionalProperties: {}
        orgId:
          type: string
    UpdateOrganizationSettingsResponse:
      type: object
      properties:
        settings:
          type: object
          additionalProperties: {}
        updated:
          type: array
          items:
            type: string
      required:
        - settings
        - updated
    UpdateUserSettingsRequest:
      type: object
      properties:
        settings:
          type: object
          additionalProperties: {}
        preferences:
          type: object
          additionalProperties: {}
        notifications:
          type: object
          additionalProperties: {}
        interfaces:
          type: object
          additionalProperties: {}
        defaults:
          type: object
          additionalProperties: {}
    UpdateUserSettingsResponse:
      type: object
      properties:
        settings:
          type: object
          additionalProperties: {}
        updated:
          type: array
          items:
            type: string
      required:
        - settings
        - updated
    UsageAnalyticsResponse:
      type: object
      properties:
        totalRequests:
          type: integer
        uniqueUsers:
          type: integer
        activeAgents:
          type: integer
        requestsOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        requestsByType:
          type: object
          additionalProperties:
            type: integer
        topAgents:
          type: array
          items:
            $ref: '#/components/schemas/AgentUsageInfo'
        topUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserUsageInfo'
      required:
        - activeAgents
        - requestsByType
        - requestsOverTime
        - topAgents
        - topUsers
        - totalRequests
        - uniqueUsers
    User:
      type: object
      properties:
        id:
          type: string
          description: User UUID
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        username:
          type: string
          nullable: true
          description: Optional username
        role:
          type: string
          default: user
          description: User role (user, admin, etc.)
        status:
          type: string
          default: active
          description: User status (active, inactive)
        is_staff:
          type: boolean
          description: Staff status (derived from role)
        date_joined:
          type: string
          format: date-time
          description: When user joined
        last_login:
          type: string
          format: date-time
          description: Last login timestamp
      required:
        - email
        - id
        - name
    UserActivityStats:
      type: object
      properties:
        lastActive:
          type: string
          format: date-time
        activeDays:
          type: integer
        activityByDay:
          type: object
          additionalProperties:
            type: integer
        activityByHour:
          type: object
          additionalProperties:
            type: integer
      required:
        - activeDays
        - activityByDay
        - activityByHour
        - lastActive
    UserAnalyticsResponse:
      type: object
      properties:
        usage:
          $ref: '#/components/schemas/UserUsageStats'
        activity:
          $ref: '#/components/schemas/UserActivityStats'
        cost:
          $ref: '#/components/schemas/UserCostStats'
        interactions:
          $ref: '#/components/schemas/UserInteractionsStats'
      required:
        - activity
        - cost
        - interactions
        - usage
    UserCostStats:
      type: object
      properties:
        totalCost:
          type: number
          format: double
        costOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        costByAgent:
          type: object
          additionalProperties:
            type: number
            format: double
      required:
        - costByAgent
        - costOverTime
        - totalCost
    UserInteractionsStats:
      type: object
      properties:
        topQueries:
          type: array
          items:
            type: string
        frequentInteractions:
          type: array
          items:
            type: object
            additionalProperties: {}
      required:
        - frequentInteractions
        - topQueries
    UserSettingsResponse:
      type: object
      properties:
        settings:
          type: object
          additionalProperties: {}
        preferences:
          type: object
          additionalProperties: {}
        notifications:
          type: object
          additionalProperties: {}
        interfaces:
          type: object
          additionalProperties: {}
        defaults:
          type: object
          additionalProperties: {}
      required:
        - defaults
        - interfaces
        - notifications
        - preferences
        - settings
    UserStats:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        requests:
          type: integer
        percentage:
          type: number
          format: double
      required:
        - id
        - name
        - percentage
        - requests
    UserUsageInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        requests:
          type: integer
        percentage:
          type: number
          format: double
      required:
        - id
        - name
        - percentage
        - requests
    UserUsageStats:
      type: object
      properties:
        totalRequests:
          type: integer
        requestsOverTime:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        requestsByAgent:
          type: object
          additionalProperties:
            type: integer
      required:
        - requestsByAgent
        - requestsOverTime
        - totalRequests
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
