openapi: 3.0.1
info:
  title: Xenovia API
  description: API documentation for Xenovia project
  termsOfService: https://www.xenovia.ai/terms/
  contact:
    email: contact@xenovia.ai
  license:
    name: MIT License
  version: v1
servers:
- url: http://127.0.0.1:8000/api/v1
security:
- Basic: []
paths:
  /admin/audit-logs:
    get:
      summary: List System Audit Logs
      tags:
      - admin
      description: API endpoint for retrieving system audit logs.
      operationId: admin_audit-logs_list
      responses:
        "200":
          description: ""
          content: {}
  /admin/audit-logs/{log_id}:
    get:
      summary: Get Specific Audit Log
      tags:
      - admin
      description: API endpoint for retrieving a specific audit log.
      operationId: admin_audit-logs_read
      parameters:
      - name: log_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /admin/maintenance:
    get:
      summary: Get Maintenance Mode Status
      tags:
      - admin
      description: API endpoint for managing system maintenance mode.
      operationId: admin_maintenance_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Toggle Maintenance Mode
      tags:
      - admin
      description: API endpoint for managing system maintenance mode.
      operationId: admin_maintenance_create
      responses:
        "201":
          description: ""
          content: {}
  /admin/settings:
    get:
      summary: List Global Settings
      tags:
      - admin
      description: API endpoint for managing global system settings.
      operationId: admin_settings_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Global Setting
      tags:
      - admin
      description: API endpoint for managing global system settings.
      operationId: admin_settings_create
      responses:
        "201":
          description: ""
          content: {}
  /admin/settings/{setting_key}:
    get:
      summary: Get Specific Setting
      tags:
      - admin
      description: API endpoint for managing a specific global system setting.
      operationId: admin_settings_read
      parameters:
      - name: setting_key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Specific Setting
      tags:
      - admin
      description: API endpoint for managing a specific global system setting.
      operationId: admin_settings_update
      parameters:
      - name: setting_key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Specific Setting
      tags:
      - admin
      description: API endpoint for managing a specific global system setting.
      operationId: admin_settings_delete
      parameters:
      - name: setting_key
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /admin/stats:
    get:
      summary: Get System Statistics
      tags:
      - admin
      description: API endpoint for retrieving system statistics.
      operationId: admin_stats_list
      responses:
        "200":
          description: ""
          content: {}
  /admin/users:
    get:
      summary: List Users
      tags:
      - admin
      description: API endpoint for admin user management.
      operationId: admin_users_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create User
      tags:
      - admin
      description: API endpoint for admin user management.
      operationId: admin_users_create
      responses:
        "201":
          description: ""
          content: {}
  /admin/users/{user_id}:
    get:
      summary: Get User Details
      tags:
      - admin
      description: API endpoint for admin user detail operations.
      operationId: admin_users_read
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update User
      tags:
      - admin
      description: API endpoint for admin user detail operations.
      operationId: admin_users_update
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete User
      tags:
      - admin
      description: API endpoint for admin user detail operations.
      operationId: admin_users_delete
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/agents/:
    get:
      summary: List Agents
      tags:
      - agents
      description: List all agents for the current user or for a specific project.
      operationId: agents_agents_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Agent
      tags:
      - agents
      description: Create a new agent.
      operationId: agents_agents_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/agents/{agent_id}/:
    get:
      summary: Get Agent Details
      tags:
      - agents
      description: Retrieve details of a specific agent.
      operationId: agents_agents_read
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Agent
      tags:
      - agents
      description: Update a specific agent.
      operationId: agents_agents_update
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Agent
      tags:
      - agents
      description: Delete a specific agent.
      operationId: agents_agents_delete
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/agents/{agent_id}/config/:
    get:
      summary: Get Agent Configuration
      tags:
      - agents
      description: Retrieve an agent's configuration.
      operationId: agents_agents_config_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Agent Configuration
      tags:
      - agents
      description: Update an agent's configuration.
      operationId: agents_agents_config_update
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/agents/{agent_id}/files/:
    get:
      summary: Get Agent File Contents
      tags:
      - agents
      description: Get the contents of a file in the agent's workspace.
      operationId: agents_agents_files_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Agent File
      tags:
      - agents
      description: Update a file in the agent's workspace.
      operationId: agents_agents_files_update
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Upload Agent File
      tags:
      - agents
      description: Upload a file to the agent's workspace.
      operationId: agents_agents_files_create
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/agents/{agent_id}/logs/:
    get:
      summary: Get Agent Logs
      tags:
      - agents
      description: Retrieve logs for a specific agent.
      operationId: agents_agents_logs_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/agents/{agent_id}/memory/:
    get:
      summary: List Agent Memory Items
      tags:
      - agents
      description: List memory items for a specific agent.
      operationId: agents_agents_memory_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Agent Memory Item
      tags:
      - agents
      description: Add a memory item to an agent's memory.
      operationId: agents_agents_memory_create
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
    delete:
      summary: Delete Agent Memory Items
      tags:
      - agents
      description: Delete memory items for an agent.
      operationId: agents_agents_memory_delete
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/agents/{agent_id}/memory/export/:
    get:
      summary: Export Agent Memory
      tags:
      - agents
      description: Export an agent's memory.
      operationId: agents_agents_memory_export_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/agents/{agent_id}/memory/search/:
    post:
      summary: Search Agent Memory
      tags:
      - agents
      description: Search an agent's memory.
      operationId: agents_agents_memory_search_create
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/agents/{agent_id}/run/:
    post:
      summary: Run Agent
      tags:
      - agents
      description: Run an agent with a message.
      operationId: agents_agents_run_create
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/agents/{agent_id}/runner/:
    post:
      summary: Execute Code in Agent Workspace
      tags:
      - agents
      description: Execute code in an agent's workspace.
      operationId: agents_agents_runner_create
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/agents/{agent_id}/stats/:
    get:
      summary: Get Agent Statistics
      tags:
      - agents
      description: Retrieve statistics for a specific agent.
      operationId: agents_agents_stats_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/agents/{agent_id}/status/:
    get:
      summary: Get Agent Status
      tags:
      - agents
      description: Retrieve an agent's status.
      operationId: agents_agents_status_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Agent Status
      tags:
      - agents
      description: Update an agent's status.
      operationId: agents_agents_status_update
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/agents/{agent_id}/workspace/:
    get:
      summary: Get Agent Workspace Contents
      tags:
      - agents
      description: Get an agent's workspace contents.
      operationId: agents_agents_workspace_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Directory in Agent Workspace
      tags:
      - agents
      description: Create a new directory in the agent's workspace.
      operationId: agents_agents_workspace_create
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
    delete:
      summary: Delete File/Directory in Agent Workspace
      tags:
      - agents
      description: Delete a file or directory from the agent's workspace.
      operationId: agents_agents_workspace_delete
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/analytics/agents/{agent_id}/:
    get:
      summary: Get Agent Analytics
      tags:
      - agents
      description: Get analytics data for a specific agent.
      operationId: agents_analytics_agents_read
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/analytics/cost/:
    get:
      summary: Get Cost Analytics
      tags:
      - agents
      description: Get cost analytics data.
      operationId: agents_analytics_cost_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/analytics/performance/:
    get:
      summary: Get Performance Analytics
      tags:
      - agents
      description: Get system performance analytics data.
      operationId: agents_analytics_performance_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/analytics/projects/{project_id}/:
    get:
      summary: Get Project Analytics
      tags:
      - agents
      description: Get analytics data for a specific project.
      operationId: agents_analytics_projects_read
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/analytics/usage/:
    get:
      summary: Get Usage Analytics
      tags:
      - agents
      description: Get system-wide usage analytics data.
      operationId: agents_analytics_usage_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/analytics/users/{user_id}/:
    get:
      summary: Get User Analytics
      tags:
      - agents
      description: Get analytics data for a specific user.
      operationId: agents_analytics_users_read
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/collaboration/messages/{message_id}/:
    get:
      summary: Get Collaboration Message
      tags:
      - agents
      description: Get a specific message from a collaboration session
      operationId: agents_collaboration_messages_read
      parameters:
      - name: message_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Collaboration Message
      tags:
      - agents
      description: Update a specific message in a collaboration session
      operationId: agents_collaboration_messages_update
      parameters:
      - name: message_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Collaboration Message
      tags:
      - agents
      description: Delete a specific message from a collaboration session
      operationId: agents_collaboration_messages_delete
      parameters:
      - name: message_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/collaboration/sessions/:
    get:
      summary: List Collaboration Sessions
      tags:
      - agents
      description: List collaboration sessions with optional filtering
      operationId: agents_collaboration_sessions_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Collaboration Session
      tags:
      - agents
      description: Create a new collaboration session
      operationId: agents_collaboration_sessions_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/collaboration/sessions/{session_id}/:
    get:
      summary: List Collaboration Session Messages
      tags:
      - agents
      description: List all messages in a collaboration session
      operationId: agents_collaboration_sessions_read
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Collaboration Session
      tags:
      - agents
      description: Update a specific collaboration session
      operationId: agents_collaboration_sessions_update
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Collaboration Session Message
      tags:
      - agents
      description: Add a message to a collaboration session
      operationId: agents_collaboration_sessions_create
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
    delete:
      summary: Delete Collaboration Session
      tags:
      - agents
      description: Delete a specific collaboration session
      operationId: agents_collaboration_sessions_delete
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/collaboration/sessions/{session_id}/messages/:
    get:
      summary: List Collaboration Session Messages by Sender
      tags:
      - agents
      description: List messages from a specific sender in a collaboration session
      operationId: agents_collaboration_sessions_messages_list
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Perform Action on Collaboration Session Messages
      tags:
      - agents
      description: Perform an action on all messages from a sender in a session
      operationId: agents_collaboration_sessions_messages_create
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/conversations/:
    get:
      summary: List Conversations
      tags:
      - agents
      description: List all conversations with optional filtering
      operationId: agents_conversations_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Start Conversation
      tags:
      - agents
      description: Start a new conversation with an agent
      operationId: agents_conversations_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/conversations/{conversation_id}/:
    get:
      summary: Get Conversation Details
      tags:
      - agents
      description: Get details of a specific conversation
      operationId: agents_conversations_read
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Conversation
      tags:
      - agents
      description: Update a specific conversation
      operationId: agents_conversations_update
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Conversation
      tags:
      - agents
      description: Delete a specific conversation
      operationId: agents_conversations_delete
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/conversations/{conversation_id}/messages/:
    get:
      summary: Get Conversation Message
      tags:
      - agents
      description: Get a specific message from a conversation
      operationId: agents_conversations_messages_list
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Conversation Message
      tags:
      - agents
      description: "Update a message in a conversation (e.g., for feedback)"
      operationId: agents_conversations_messages_update
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Conversation Message
      tags:
      - agents
      description: Delete a message from a conversation
      operationId: agents_conversations_messages_delete
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/deployments/:
    get:
      summary: List Deployments
      tags:
      - agents
      description: List all deployments with optional filtering
      operationId: agents_deployments_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Deployment
      tags:
      - agents
      description: Create a new deployment
      operationId: agents_deployments_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/deployments/{deployment_id}/:
    get:
      summary: Get Deployment Details
      tags:
      - agents
      description: Get a specific deployment
      operationId: agents_deployments_read
      parameters:
      - name: deployment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Deployment
      tags:
      - agents
      description: Update a deployment
      operationId: agents_deployments_update
      parameters:
      - name: deployment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Deployment
      tags:
      - agents
      description: Delete a deployment
      operationId: agents_deployments_delete
      parameters:
      - name: deployment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/deployments/{deployment_id}/logs/:
    get:
      summary: Get Deployment Logs
      tags:
      - agents
      description: Get logs for a specific deployment
      operationId: agents_deployments_logs_list
      parameters:
      - name: deployment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/executions/:
    get:
      summary: List Agent Executions
      tags:
      - agents
      description: List agent executions with optional filtering.
      operationId: agents_executions_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Agent Execution
      tags:
      - agents
      description: Create a new execution for an agent.
      operationId: agents_executions_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/executions/{execution_id}/:
    get:
      summary: Get Execution Details
      tags:
      - agents
      description: Retrieve details of a specific execution.
      operationId: agents_executions_read
      parameters:
      - name: execution_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Cancel Execution
      tags:
      - agents
      description: Cancel a running execution.
      operationId: agents_executions_delete
      parameters:
      - name: execution_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/fine-tuning/datasets/:
    get:
      summary: List Fine-tuning Datasets
      tags:
      - agents
      description: List all fine-tuning datasets with optional filtering.
      operationId: agents_fine-tuning_datasets_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Fine-tuning Dataset
      tags:
      - agents
      description: Create a new fine-tuning dataset.
      operationId: agents_fine-tuning_datasets_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/fine-tuning/datasets/{dataset_id}/:
    get:
      summary: Get Fine-tuning Dataset Details
      tags:
      - agents
      description: Retrieve details of a specific fine-tuning dataset.
      operationId: agents_fine-tuning_datasets_read
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Fine-tuning Dataset
      tags:
      - agents
      description: Update a fine-tuning dataset.
      operationId: agents_fine-tuning_datasets_update
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Fine-tuning Dataset
      tags:
      - agents
      description: Delete a fine-tuning dataset.
      operationId: agents_fine-tuning_datasets_delete
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/fine-tuning/jobs/:
    get:
      summary: List Fine-tuning Jobs
      tags:
      - agents
      description: List all fine-tuning jobs with optional filtering.
      operationId: agents_fine-tuning_jobs_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Fine-tuning Job
      tags:
      - agents
      description: Create a new fine-tuning job.
      operationId: agents_fine-tuning_jobs_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/fine-tuning/jobs/{job_id}/:
    get:
      summary: Get Fine-tuning Job Details
      tags:
      - agents
      description: Retrieve details of a specific fine-tuning job.
      operationId: agents_fine-tuning_jobs_read
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/fine-tuning/jobs/{job_id}/cancel/:
    post:
      summary: Cancel Fine-tuning Job
      tags:
      - agents
      description: Cancel a fine-tuning job in progress.
      operationId: agents_fine-tuning_jobs_cancel_create
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/fine-tuning/models/:
    get:
      summary: List Fine-tuned Models
      tags:
      - agents
      description: List all fine-tuned models with optional filtering.
      operationId: agents_fine-tuning_models_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Fine-tuned Model
      tags:
      - agents
      description: Create a new fine-tuned model by starting a fine-tuning job.
      operationId: agents_fine-tuning_models_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/fine-tuning/models/{model_id}/:
    get:
      summary: Get Fine-tuned Model Details
      tags:
      - agents
      description: Retrieve details of a specific fine-tuned model.
      operationId: agents_fine-tuning_models_read
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Fine-tuned Model
      tags:
      - agents
      description: Update a fine-tuned model.
      operationId: agents_fine-tuning_models_update
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Fine-tuned Model
      tags:
      - agents
      description: Delete a fine-tuned model.
      operationId: agents_fine-tuning_models_delete
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/integrations/:
    get:
      summary: List Integrations
      tags:
      - agents
      description: List available integrations with optional filtering
      operationId: agents_integrations_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Integration
      tags:
      - agents
      description: Create a custom integration
      operationId: agents_integrations_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/integrations/{integration_id}/:
    get:
      summary: Get Integration Details
      tags:
      - agents
      description: Get details of a specific integration
      operationId: agents_integrations_read
      parameters:
      - name: integration_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Integration
      tags:
      - agents
      description: Update a specific integration
      operationId: agents_integrations_update
      parameters:
      - name: integration_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Integration
      tags:
      - agents
      description: Delete a specific integration
      operationId: agents_integrations_delete
      parameters:
      - name: integration_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/integrations/{integration_id}/auth/:
    get:
      summary: Get Integration Auth Info
      tags:
      - agents
      description: Get authentication information for an integration
      operationId: agents_integrations_auth_list
      parameters:
      - name: integration_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Complete Integration OAuth Flow
      tags:
      - agents
      description: Complete OAuth authentication flow
      operationId: agents_integrations_auth_update
      parameters:
      - name: integration_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Initiate/Update Integration Auth
      tags:
      - agents
      description: Initiate or update authentication for an integration
      operationId: agents_integrations_auth_create
      parameters:
      - name: integration_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
    delete:
      summary: Remove Integration Auth
      tags:
      - agents
      description: Remove authentication for an integration
      operationId: agents_integrations_auth_delete
      parameters:
      - name: integration_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/knowledgebases/:
    get:
      summary: List Knowledge Bases
      tags:
      - agents
      description: List all knowledge bases with optional filtering
      operationId: agents_knowledgebases_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Knowledge Base
      tags:
      - agents
      description: Create a new knowledge base
      operationId: agents_knowledgebases_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/knowledgebases/{kb_id}/:
    get:
      summary: Get Knowledge Base Details
      tags:
      - agents
      description: Retrieve a specific knowledge base
      operationId: agents_knowledgebases_read
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Knowledge Base
      tags:
      - agents
      description: Update a knowledge base
      operationId: agents_knowledgebases_update
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Knowledge Base
      tags:
      - agents
      description: Delete a knowledge base
      operationId: agents_knowledgebases_delete
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/knowledgebases/{kb_id}/documents/:
    get:
      summary: List Knowledge Base Documents
      tags:
      - agents
      description: List documents in a knowledge base
      operationId: agents_knowledgebases_documents_list
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Knowledge Base Document
      tags:
      - agents
      description: Add a document to a knowledge base
      operationId: agents_knowledgebases_documents_create
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/knowledgebases/{kb_id}/documents/{doc_id}/:
    get:
      summary: Get Knowledge Base Document Details
      tags:
      - agents
      description: Retrieve a specific document
      operationId: agents_knowledgebases_documents_read
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      - name: doc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Knowledge Base Document
      tags:
      - agents
      description: Update a document
      operationId: agents_knowledgebases_documents_update
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      - name: doc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Knowledge Base Document
      tags:
      - agents
      description: Delete a document
      operationId: agents_knowledgebases_documents_delete
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      - name: doc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/knowledgebases/{kb_id}/search/:
    post:
      summary: Search Knowledge Base
      tags:
      - agents
      description: Search a knowledge base
      operationId: agents_knowledgebases_search_create
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/marketplace/:
    get:
      summary: Search Marketplace Agents
      tags:
      - agents
      description: Search for agents in the marketplace.
      operationId: agents_marketplace_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/marketplace/categories/:
    get:
      summary: Get Marketplace Categories
      tags:
      - agents
      description: Get all marketplace categories.
      operationId: agents_marketplace_categories_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/marketplace/{agent_id}/:
    get:
      summary: Get Marketplace Agent Details
      tags:
      - agents
      description: Get details of a specific marketplace agent.
      operationId: agents_marketplace_read
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Install Marketplace Agent
      tags:
      - agents
      description: Install a marketplace agent into a project.
      operationId: agents_marketplace_create
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/memory/collections/:
    get:
      summary: List Memory Collections
      tags:
      - agents
      description: List memory collections for a user.
      operationId: agents_memory_collections_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Memory Collection
      tags:
      - agents
      description: Create a new memory collection.
      operationId: agents_memory_collections_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/monitoring/alerts/:
    get:
      summary: List Monitoring Alerts
      tags:
      - agents
      description: List system alerts with optional filtering.
      operationId: agents_monitoring_alerts_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Monitoring Alert
      tags:
      - agents
      description: Create a new system alert.
      operationId: agents_monitoring_alerts_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/monitoring/alerts/{alert_id}/:
    get:
      summary: Get Monitoring Alert Details
      tags:
      - agents
      description: Retrieve details of a specific alert.
      operationId: agents_monitoring_alerts_read
      parameters:
      - name: alert_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Monitoring Alert
      tags:
      - agents
      description: Update an alert.
      operationId: agents_monitoring_alerts_update
      parameters:
      - name: alert_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Monitoring Alert
      tags:
      - agents
      description: Delete an alert.
      operationId: agents_monitoring_alerts_delete
      parameters:
      - name: alert_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/monitoring/dashboard/:
    get:
      summary: Get Monitoring Dashboard Data
      tags:
      - agents
      description: Get monitoring dashboard data.
      operationId: agents_monitoring_dashboard_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/monitoring/discovery/:
    get:
      summary: Discover Monitoring Services
      tags:
      - agents
      description: Discover available services in the system.
      operationId: agents_monitoring_discovery_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/monitoring/health/:
    get:
      summary: Get Monitoring System Health
      tags:
      - agents
      description: Get the overall health status of the system.
      operationId: agents_monitoring_health_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/monitoring/logs/:
    get:
      summary: Get Monitoring System Logs
      tags:
      - agents
      description: Get system logs with optional filtering.
      operationId: agents_monitoring_logs_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/monitoring/metrics/:
    get:
      summary: Get Monitoring System Metrics
      tags:
      - agents
      description: Get system metrics with optional filtering.
      operationId: agents_monitoring_metrics_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/monitoring/services/health/:
    get:
      summary: Get Monitoring Service Health
      tags:
      - agents
      description: Get health information for individual services.
      operationId: agents_monitoring_services_health_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/notifications/:
    get:
      summary: Get User Notifications
      tags:
      - agents
      description: Get notifications for the current user
      operationId: agents_notifications_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Mark All User Notifications Read
      tags:
      - agents
      description: Mark all notifications as read for the current user
      operationId: agents_notifications_update
      responses:
        "200":
          description: ""
          content: {}
  /agents/notifications/settings/:
    get:
      summary: Get User Notification Settings
      tags:
      - agents
      description: Get notification preferences for the current user
      operationId: agents_notifications_settings_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update User Notification Settings
      tags:
      - agents
      description: Update notification preferences for the current user
      operationId: agents_notifications_settings_update
      responses:
        "200":
          description: ""
          content: {}
  /agents/notifications/{notification_id}/:
    get:
      summary: Get Notification Details
      tags:
      - agents
      description: Get details for a specific notification
      operationId: agents_notifications_read
      parameters:
      - name: notification_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Mark Notification Read
      tags:
      - agents
      description: Mark a specific notification as read
      operationId: agents_notifications_update
      parameters:
      - name: notification_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Notification
      tags:
      - agents
      description: Delete a specific notification
      operationId: agents_notifications_delete
      parameters:
      - name: notification_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/projects/{project_id}/notifications/:
    get:
      summary: Get Project Notifications
      tags:
      - agents
      description: Get notifications related to a specific project
      operationId: agents_projects_notifications_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Project Notification
      tags:
      - agents
      description: Create a notification for a project
      operationId: agents_projects_notifications_create
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/security/policies/:
    get:
      summary: List Security Policies
      tags:
      - agents
      description: API endpoint for managing security policies
      operationId: agents_security_policies_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Security Policy
      tags:
      - agents
      description: API endpoint for managing security policies
      operationId: agents_security_policies_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/security/rules/:
    get:
      summary: List Security Rules
      tags:
      - agents
      description: List all security rules
      operationId: agents_security_rules_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Security Rule
      tags:
      - agents
      description: Create a new security rule
      operationId: agents_security_rules_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/security/rules/{rule_id}/:
    get:
      summary: Get Security Rule Details
      tags:
      - agents
      description: "API endpoint for retrieving, updating and deleting a security rule"
      operationId: agents_security_rules_read
      parameters:
      - name: rule_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Security Rule
      tags:
      - agents
      description: "API endpoint for retrieving, updating and deleting a security rule"
      operationId: agents_security_rules_update
      parameters:
      - name: rule_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Security Rule
      tags:
      - agents
      description: "API endpoint for retrieving, updating and deleting a security rule"
      operationId: agents_security_rules_delete
      parameters:
      - name: rule_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/security/scans/:
    get:
      summary: List Security Scans
      tags:
      - agents
      description: API endpoint for performing and listing security scans
      operationId: agents_security_scans_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Start Security Scan
      tags:
      - agents
      description: API endpoint for performing and listing security scans
      operationId: agents_security_scans_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/security/scans/{scan_id}/:
    get:
      summary: Get Security Scan Details
      tags:
      - agents
      description: API endpoint for retrieving and managing a specific security scan
      operationId: agents_security_scans_read
      parameters:
      - name: scan_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Security Scan
      tags:
      - agents
      description: API endpoint for retrieving and managing a specific security scan
      operationId: agents_security_scans_delete
      parameters:
      - name: scan_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/settings/apikeys/:
    get:
      summary: List API Keys
      tags:
      - agents
      description: List all API keys for the current user.
      operationId: agents_settings_apikeys_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create API Key
      tags:
      - agents
      description: Create a new API key.
      operationId: agents_settings_apikeys_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/settings/apikeys/{key_id}/:
    get:
      summary: Get API Key Details
      tags:
      - agents
      description: Get details of a specific API key.
      operationId: agents_settings_apikeys_read
      parameters:
      - name: key_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update API Key
      tags:
      - agents
      description: Update an API key.
      operationId: agents_settings_apikeys_update
      parameters:
      - name: key_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete API Key
      tags:
      - agents
      description: Delete an API key.
      operationId: agents_settings_apikeys_delete
      parameters:
      - name: key_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/settings/keys/:
    get:
      summary: List Settings Keys
      tags:
      - agents
      description: List available settings keys and their metadata.
      operationId: agents_settings_keys_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/settings/organization/:
    get:
      summary: Get Organization Settings
      tags:
      - agents
      description: Get organization settings.
      operationId: agents_settings_organization_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Organization Settings
      tags:
      - agents
      description: Update organization settings.
      operationId: agents_settings_organization_update
      responses:
        "200":
          description: ""
          content: {}
  /agents/settings/user/:
    get:
      summary: Get User Settings
      tags:
      - agents
      description: Get settings for the current user.
      operationId: agents_settings_user_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update User Settings
      tags:
      - agents
      description: Update settings for the current user.
      operationId: agents_settings_user_update
      responses:
        "200":
          description: ""
          content: {}
  /agents/system/notifications/:
    post:
      summary: Create System Notification
      tags:
      - agents
      description: Create a system-wide notification (admin only)
      operationId: agents_system_notifications_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/teams/:
    get:
      summary: List Teams
      tags:
      - agents
      description: Get teams for the current user
      operationId: agents_teams_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Team
      tags:
      - agents
      description: Create a new team
      operationId: agents_teams_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/teams/{team_id}/:
    get:
      summary: Get Team Details
      tags:
      - agents
      description: Get details for a specific team
      operationId: agents_teams_read
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Team
      tags:
      - agents
      description: Update a team
      operationId: agents_teams_update
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Team
      tags:
      - agents
      description: Delete a team
      operationId: agents_teams_delete
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/teams/{team_id}/members/:
    get:
      summary: List Team Members
      tags:
      - agents
      description: List all members of a team
      operationId: agents_teams_members_list
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Team Member
      tags:
      - agents
      description: Add a member to a team
      operationId: agents_teams_members_create
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
    delete:
      summary: Remove Team Member (Deprecated)
      tags:
      - agents
      description: Remove a member from a team
      operationId: agents_teams_members_delete
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/teams/{team_id}/members/{user_id}/:
    put:
      summary: Update Team Member Role
      tags:
      - agents
      description: Update a team member's role
      operationId: agents_teams_members_update
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Remove Team Member
      tags:
      - agents
      description: Remove a member from a team
      operationId: agents_teams_members_delete
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/teams/{team_id}/projects/:
    get:
      summary: List Team Projects
      tags:
      - agents
      description: Get projects for a specific team
      operationId: agents_teams_projects_list
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Project to Team
      tags:
      - agents
      description: Add a project to a team
      operationId: agents_teams_projects_create
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/teams/{team_id}/projects/{project_id}/:
    delete:
      summary: Remove Project from Team
      tags:
      - agents
      description: Remove a project from a team
      operationId: agents_teams_projects_delete
      parameters:
      - name: team_id
        in: path
        required: true
        schema:
          type: string
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/tests/cases/:
    get:
      summary: List Test Cases
      tags:
      - agents
      description: List test cases with optional filtering.
      operationId: agents_tests_cases_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Test Case
      tags:
      - agents
      description: Create a new test case.
      operationId: agents_tests_cases_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/tests/cases/{case_id}/:
    get:
      summary: Get Test Case Details
      tags:
      - agents
      description: Get details of a specific test case.
      operationId: agents_tests_cases_read
      parameters:
      - name: case_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Test Case
      tags:
      - agents
      description: Update a test case.
      operationId: agents_tests_cases_update
      parameters:
      - name: case_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Test Case
      tags:
      - agents
      description: Delete a test case.
      operationId: agents_tests_cases_delete
      parameters:
      - name: case_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/tests/evaluate/:
    post:
      summary: Evaluate Agent Test
      tags:
      - agents
      description: Evaluate an agent against a test case or custom input.
      operationId: agents_tests_evaluate_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/tests/runs/:
    get:
      summary: List Test Runs
      tags:
      - agents
      description: List test runs with optional filtering.
      operationId: agents_tests_runs_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Test Run
      tags:
      - agents
      description: Create a new test run and start execution.
      operationId: agents_tests_runs_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/tests/runs/{run_id}/:
    get:
      summary: Get Test Run Details
      tags:
      - agents
      description: Get details of a specific test run.
      operationId: agents_tests_runs_read
      parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Test Run
      tags:
      - agents
      description: Delete a test run.
      operationId: agents_tests_runs_delete
      parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/tests/suites/:
    get:
      summary: List Test Suites
      tags:
      - agents
      description: List test suites with optional filtering.
      operationId: agents_tests_suites_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Test Suite
      tags:
      - agents
      description: Create a new test suite.
      operationId: agents_tests_suites_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/tests/suites/{suite_id}/:
    get:
      summary: Get Test Suite Details
      tags:
      - agents
      description: Get details of a specific test suite.
      operationId: agents_tests_suites_read
      parameters:
      - name: suite_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Test Suite
      tags:
      - agents
      description: Update a test suite.
      operationId: agents_tests_suites_update
      parameters:
      - name: suite_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Test Suite
      tags:
      - agents
      description: Delete a test suite.
      operationId: agents_tests_suites_delete
      parameters:
      - name: suite_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/webhook-endpoints/:
    get:
      summary: List Webhook Endpoints
      tags:
      - agents
      description: List all webhook endpoints for a project.
      operationId: agents_webhook-endpoints_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Webhook Endpoint
      tags:
      - agents
      description: Create a new webhook endpoint.
      operationId: agents_webhook-endpoints_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/webhook-endpoints/{endpoint_id}/:
    get:
      summary: Get Webhook Endpoint Details
      tags:
      - agents
      description: Get a webhook endpoint by ID.
      operationId: agents_webhook-endpoints_read
      parameters:
      - name: endpoint_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Webhook Endpoint
      tags:
      - agents
      description: Update a webhook endpoint.
      operationId: agents_webhook-endpoints_update
      parameters:
      - name: endpoint_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Webhook Endpoint
      tags:
      - agents
      description: Delete a webhook endpoint.
      operationId: agents_webhook-endpoints_delete
      parameters:
      - name: endpoint_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/webhook-endpoints/{endpoint_id}/events/:
    get:
      summary: List Webhook Endpoint Events
      tags:
      - agents
      description: List events for a webhook endpoint.
      operationId: agents_webhook-endpoints_events_list
      parameters:
      - name: endpoint_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/webhook-event-types:
    get:
      summary: List Webhook Event Types
      tags:
      - agents
      description: Get all available webhook event types.
      operationId: agents_webhook-event-types_list
      responses:
        "200":
          description: ""
          content: {}
  /agents/webhook-events/{event_id}/:
    get:
      summary: Get Webhook Event Details
      tags:
      - agents
      description: Get a webhook event by ID.
      operationId: agents_webhook-events_read
      parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Retry Webhook Event
      tags:
      - agents
      description: Retry a failed webhook event.
      operationId: agents_webhook-events_create
      parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/webhooks/:
    get:
      summary: List Webhooks
      tags:
      - agents
      description: List all webhooks for a project.
      operationId: agents_webhooks_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Webhook
      tags:
      - agents
      description: Create a new webhook.
      operationId: agents_webhooks_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/webhooks/{webhook_id}/:
    get:
      summary: Get Webhook Details
      tags:
      - agents
      description: Get a webhook by ID.
      operationId: agents_webhooks_read
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Webhook
      tags:
      - agents
      description: Update a webhook.
      operationId: agents_webhooks_update
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Webhook
      tags:
      - agents
      description: Delete a webhook.
      operationId: agents_webhooks_delete
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/webhooks/{webhook_id}/logs/:
    get:
      summary: List Webhook Logs
      tags:
      - agents
      description: List logs for a webhook.
      operationId: agents_webhooks_logs_list
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /agents/webhooks/{webhook_id}/test/:
    post:
      summary: Test Webhook
      tags:
      - agents
      description: Test a webhook by sending a test event.
      operationId: agents_webhooks_test_create
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /agents/workflows/:
    get:
      summary: List Workflows
      tags:
      - agents
      description: List all workflows
      operationId: agents_workflows_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Workflow
      tags:
      - agents
      description: Create a new workflow
      operationId: agents_workflows_create
      responses:
        "201":
          description: ""
          content: {}
  /agents/workflows/runs/{run_id}/:
    get:
      summary: Get Workflow Run Details
      tags:
      - agents
      description: Get details of a workflow run or list all runs for a workflow
      operationId: agents_workflows_runs_read
      parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Perform Action on Workflow Run
      tags:
      - agents
      description: Start a new workflow run or perform actions on an existing run
      operationId: agents_workflows_runs_create
      parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
    delete:
      summary: Delete Workflow Run
      tags:
      - agents
      description: Delete a workflow run
      operationId: agents_workflows_runs_delete
      parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/workflows/{workflow_id}/:
    get:
      summary: Get Workflow Details
      tags:
      - agents
      description: Get a specific workflow
      operationId: agents_workflows_read
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Workflow
      tags:
      - agents
      description: Update a workflow
      operationId: agents_workflows_update
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Workflow
      tags:
      - agents
      description: Delete a workflow
      operationId: agents_workflows_delete
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /agents/workflows/{workflow_id}/run/:
    get:
      summary: List Workflow Runs
      tags:
      - agents
      description: Get details of a workflow run or list all runs for a workflow
      operationId: agents_workflows_run_list
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Start Workflow Run
      tags:
      - agents
      description: Start a new workflow run or perform actions on an existing run
      operationId: agents_workflows_run_create
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
    delete:
      summary: Delete Workflow Run (Duplicate?)
      tags:
      - agents
      description: Delete a workflow run
      operationId: agents_workflows_run_delete
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /analytics/agents/{agent_id}/:
    get:
      summary: Get Agent Analytics Data
      tags:
      - analytics
      description: Get agent analytics data
      operationId: analytics_agents_read
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /analytics/custom/:
    post:
      summary: Get Custom Analytics Data
      tags:
      - analytics
      description: Get custom analytics data
      operationId: analytics_custom_create
      responses:
        "201":
          description: ""
          content: {}
  /analytics/dashboard/:
    get:
      summary: Get Dashboard Analytics Data
      tags:
      - analytics
      description: Get dashboard analytics data
      operationId: analytics_dashboard_list
      responses:
        "200":
          description: ""
          content: {}
  /analytics/executions/:
    get:
      summary: Get Execution Analytics Data
      tags:
      - analytics
      description: Get execution analytics data
      operationId: analytics_executions_list
      responses:
        "200":
          description: ""
          content: {}
  /analytics/performance/:
    get:
      summary: Get Performance Analytics Data
      tags:
      - analytics
      description: Get performance analytics data
      operationId: analytics_performance_list
      responses:
        "200":
          description: ""
          content: {}
  /analytics/projects/{project_id}/:
    get:
      summary: Get Project Analytics Data
      tags:
      - analytics
      description: Get project analytics data
      operationId: analytics_projects_read
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /analytics/usage/:
    get:
      summary: Get Usage Analytics Data
      tags:
      - analytics
      description: Get usage analytics data
      operationId: analytics_usage_list
      responses:
        "200":
          description: ""
          content: {}
  /auth/login:
    post:
      summary: User Login
      tags:
      - auth
      description: API endpoint for user login.
      operationId: auth_login_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/logout:
    post:
      summary: User Logout
      tags:
      - auth
      description: API endpoint for user logout.
      operationId: auth_logout_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/mfa/challenge:
    post:
      summary: MFA Challenge
      tags:
      - auth
      operationId: auth_mfa_challenge_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/mfa/disable:
    post:
      summary: Disable MFA
      tags:
      - auth
      description: API endpoint to disable MFA.
      operationId: auth_mfa_disable_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/mfa/setup:
    post:
      summary: Setup MFA
      tags:
      - auth
      description: API endpoint to set up Multi-Factor Authentication.
      operationId: auth_mfa_setup_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/mfa/verify:
    post:
      summary: Verify MFA
      tags:
      - auth
      operationId: auth_mfa_verify_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/password-reset:
    post:
      summary: Request Password Reset
      tags:
      - auth
      description: API endpoint to request a password reset.
      operationId: auth_password-reset_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/password-reset/confirm:
    post:
      summary: Confirm Password Reset
      tags:
      - auth
      description: API endpoint to confirm a password reset.
      operationId: auth_password-reset_confirm_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/profile/:
    get:
      summary: Get User Profile
      tags:
      - auth
      description: Get the current user's profile.
      operationId: auth_profile_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update User Profile
      tags:
      - auth
      description: Update the current user's profile.
      operationId: auth_profile_update
      responses:
        "200":
          description: ""
          content: {}
  /auth/refresh-token:
    post:
      summary: Refresh Auth Token
      tags:
      - auth
      operationId: auth_refresh-token_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/register:
    post:
      summary: User Registration
      tags:
      - auth
      description: API endpoint for user registration.
      operationId: auth_register_create
      responses:
        "201":
          description: ""
          content: {}
  /billing/invoices/:
    get:
      summary: Get Invoices
      tags:
      - billing
      description: Get invoices
      operationId: billing_invoices_list
      responses:
        "200":
          description: ""
          content: {}
  /billing/payment-methods/:
    get:
      summary: Get Payment Methods
      tags:
      - billing
      description: Get payment methods
      operationId: billing_payment-methods_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Payment Method
      tags:
      - billing
      description: Add a payment method
      operationId: billing_payment-methods_create
      responses:
        "201":
          description: ""
          content: {}
  /billing/plans/:
    get:
      summary: Get Billing Plans
      tags:
      - billing
      description: Get available billing plans
      operationId: billing_plans_list
      responses:
        "200":
          description: ""
          content: {}
  /billing/projects/{project_id}/:
    get:
      summary: Get Project Billing Info
      tags:
      - billing
      description: Get billing information for a project
      operationId: billing_projects_read
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Project Billing Settings
      tags:
      - billing
      description: Update billing settings for a project
      operationId: billing_projects_update
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /billing/subscription/:
    get:
      summary: Get Subscription
      tags:
      - billing
      description: Get current subscription
      operationId: billing_subscription_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Subscription
      tags:
      - billing
      description: Update subscription
      operationId: billing_subscription_update
      responses:
        "200":
          description: ""
          content: {}
  /billing/usage/:
    get:
      summary: Get Billing Usage Data
      tags:
      - billing
      description: Get usage data
      operationId: billing_usage_list
      responses:
        "200":
          description: ""
          content: {}
  /billing/user/:
    get:
      summary: Get User Billing Info
      tags:
      - billing
      description: Get billing information for the current user
      operationId: billing_user_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update User Billing Info
      tags:
      - billing
      description: Update billing information for the current user
      operationId: billing_user_update
      responses:
        "200":
          description: ""
          content: {}
  /environments/:
    get:
      summary: List Environments
      tags:
      - environments
      description: List all environments
      operationId: environments_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Environment
      tags:
      - environments
      description: Create a new environment
      operationId: environments_create
      responses:
        "201":
          description: ""
          content: {}
  /environments/{environment_id}:
    get:
      summary: Get Environment Details
      tags:
      - environments
      description: Get a specific environment
      operationId: environments_read
      parameters:
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Environment
      tags:
      - environments
      description: Update an environment
      operationId: environments_update
      parameters:
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Environment
      tags:
      - environments
      description: Delete an environment
      operationId: environments_delete
      parameters:
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /export/agents/import:
    post:
      summary: Import Agent
      tags:
      - export
      description: API endpoint for importing an agent.
      operationId: export_agents_import_create
      responses:
        "201":
          description: ""
          content: {}
  /export/agents/{agent_id}/export:
    get:
      summary: Export Agent
      tags:
      - export
      description: API endpoint for exporting an agent.
      operationId: export_agents_export_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /export/backup:
    get:
      summary: Create System Backup
      tags:
      - export
      description: API endpoint for creating a system backup.
      operationId: export_backup_list
      responses:
        "200":
          description: ""
          content: {}
  /export/projects/import:
    post:
      summary: Import Project
      tags:
      - export
      description: API endpoint for importing a project.
      operationId: export_projects_import_create
      responses:
        "201":
          description: ""
          content: {}
  /export/projects/{project_id}/export:
    get:
      summary: Export Project
      tags:
      - export
      description: API endpoint for exporting a project.
      operationId: export_projects_export_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /export/restore:
    post:
      summary: Restore System Backup
      tags:
      - export
      description: API endpoint for restoring from a system backup.
      operationId: export_restore_create
      responses:
        "201":
          description: ""
          content: {}
  /fine-tuning/base-models/:
    get:
      summary: Get Base Models
      tags:
      - fine-tuning
      description: Get all base models
      operationId: fine-tuning_base-models_list
      responses:
        "200":
          description: ""
          content: {}
  /fine-tuning/datasets/:
    get:
      summary: List Fine-tuning Datasets
      tags:
      - fine-tuning
      description: List all datasets with optional filtering
      operationId: fine-tuning_datasets_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Fine-tuning Dataset
      tags:
      - fine-tuning
      description: Create a new dataset
      operationId: fine-tuning_datasets_create
      responses:
        "201":
          description: ""
          content: {}
  /fine-tuning/datasets/{dataset_id}/:
    get:
      summary: Get Fine-tuning Dataset Details
      tags:
      - fine-tuning
      description: Get a specific dataset
      operationId: fine-tuning_datasets_read
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Fine-tuning Dataset
      tags:
      - fine-tuning
      description: Update a dataset
      operationId: fine-tuning_datasets_update
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Fine-tuning Dataset
      tags:
      - fine-tuning
      description: Delete a dataset
      operationId: fine-tuning_datasets_delete
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /fine-tuning/datasets/{dataset_id}/samples/:
    get:
      summary: List Fine-tuning Dataset Samples
      tags:
      - fine-tuning
      description: List samples in a dataset
      operationId: fine-tuning_datasets_samples_list
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Fine-tuning Dataset Sample
      tags:
      - fine-tuning
      description: Add a sample to a dataset
      operationId: fine-tuning_datasets_samples_create
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /fine-tuning/datasets/{dataset_id}/upload/:
    post:
      summary: Upload Fine-tuning Data
      tags:
      - fine-tuning
      description: Upload data files
      operationId: fine-tuning_datasets_upload_create
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /fine-tuning/jobs/:
    get:
      summary: List Fine-tuning Jobs
      tags:
      - fine-tuning
      description: List all fine-tuning jobs with optional filtering
      operationId: fine-tuning_jobs_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Fine-tuning Job
      tags:
      - fine-tuning
      description: Create a new fine-tuning job
      operationId: fine-tuning_jobs_create
      responses:
        "201":
          description: ""
          content: {}
  /fine-tuning/jobs/{job_id}/:
    get:
      summary: Get Fine-tuning Job Details
      tags:
      - fine-tuning
      description: Get a specific fine-tuning job
      operationId: fine-tuning_jobs_read
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Cancel Fine-tuning Job
      tags:
      - fine-tuning
      description: Cancel a fine-tuning job
      operationId: fine-tuning_jobs_delete
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /fine-tuning/models/:
    get:
      summary: List Fine-tuned Models
      tags:
      - fine-tuning
      description: List all fine-tuned models with optional filtering
      operationId: fine-tuning_models_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Fine-tuned Model
      tags:
      - fine-tuning
      description: Create a new fine-tuned model
      operationId: fine-tuning_models_create
      responses:
        "201":
          description: ""
          content: {}
  /fine-tuning/models/{model_id}/:
    get:
      summary: Get Fine-tuned Model Details
      tags:
      - fine-tuning
      description: Get a specific fine-tuned model
      operationId: fine-tuning_models_read
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Fine-tuned Model
      tags:
      - fine-tuning
      description: Update a fine-tuned model
      operationId: fine-tuning_models_update
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Fine-tuned Model
      tags:
      - fine-tuning
      description: Delete a fine-tuned model
      operationId: fine-tuning_models_delete
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /fine-tuning/models/{model_id}/evaluate/:
    post:
      summary: Evaluate Fine-tuned Model
      tags:
      - fine-tuning
      description: Evaluate a model
      operationId: fine-tuning_models_evaluate_create
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /fine-tuning/projects/{project_id}/datasets/:
    get:
      summary: Get Project Fine-tuning Datasets
      tags:
      - fine-tuning
      description: Get datasets for a project
      operationId: fine-tuning_projects_datasets_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /fine-tuning/projects/{project_id}/models/:
    get:
      summary: Get Project Fine-tuned Models
      tags:
      - fine-tuning
      description: Get models for a project
      operationId: fine-tuning_projects_models_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /knowledge/:
    get:
      summary: List Knowledge Bases
      tags:
      - knowledge
      description: List all knowledge bases with optional filtering
      operationId: knowledge_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Knowledge Base
      tags:
      - knowledge
      description: Create a new knowledge base
      operationId: knowledge_create
      responses:
        "201":
          description: ""
          content: {}
  /knowledge/projects/{project_id}/:
    get:
      summary: Get Project Knowledge Bases
      tags:
      - knowledge
      description: Get knowledge bases for a project
      operationId: knowledge_projects_read
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /knowledge/{kb_id}/:
    get:
      summary: Get Knowledge Base Details
      tags:
      - knowledge
      description: Get a specific knowledge base
      operationId: knowledge_read
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Knowledge Base
      tags:
      - knowledge
      description: Update a knowledge base
      operationId: knowledge_update
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Knowledge Base
      tags:
      - knowledge
      description: Delete a knowledge base
      operationId: knowledge_delete
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /knowledge/{kb_id}/documents/:
    get:
      summary: List Knowledge Base Documents
      tags:
      - knowledge
      description: List documents in a knowledge base
      operationId: knowledge_documents_list
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Knowledge Base Document
      tags:
      - knowledge
      description: Add a document to a knowledge base
      operationId: knowledge_documents_create
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /knowledge/{kb_id}/documents/{document_id}/:
    get:
      summary: Get Knowledge Base Document Details
      tags:
      - knowledge
      description: Get a specific document
      operationId: knowledge_documents_read
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Knowledge Base Document
      tags:
      - knowledge
      description: Update a document
      operationId: knowledge_documents_update
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Knowledge Base Document
      tags:
      - knowledge
      description: Delete a document
      operationId: knowledge_documents_delete
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /knowledge/{kb_id}/search/:
    post:
      summary: Search Knowledge Base Documents
      tags:
      - knowledge
      description: Search documents
      operationId: knowledge_search_create
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /knowledge/{kb_id}/upload/:
    post:
      summary: Upload Knowledge Base Documents
      tags:
      - knowledge
      description: Upload document files
      operationId: knowledge_upload_create
      parameters:
      - name: kb_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /monitoring/alerts/:
    get:
      summary: List Monitoring Alerts
      tags:
      - monitoring
      description: Get list of system alerts
      operationId: monitoring_alerts_list
      responses:
        "200":
          description: ""
          content: {}
  /monitoring/alerts/{alert_id}/:
    get:
      summary: Get Monitoring Alert Details
      tags:
      - monitoring
      description: Get details of a specific alert
      operationId: monitoring_alerts_read
      parameters:
      - name: alert_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /monitoring/health/:
    get:
      summary: Get System Health Status
      tags:
      - monitoring
      description: Check if the system is healthy
      operationId: monitoring_health_list
      responses:
        "200":
          description: ""
          content: {}
  /monitoring/logs/:
    get:
      summary: Get System Logs
      tags:
      - monitoring
      description: Get system logs with optional filtering
      operationId: monitoring_logs_list
      responses:
        "200":
          description: ""
          content: {}
  /monitoring/metrics/performance/:
    get:
      summary: Get Performance Metrics
      tags:
      - monitoring
      description: Get performance metrics including response times and throughput
      operationId: monitoring_metrics_performance_list
      responses:
        "200":
          description: ""
          content: {}
  /monitoring/metrics/system/:
    get:
      summary: Get System Metrics
      tags:
      - monitoring
      description: "Get system metrics including CPU, memory, and disk usage"
      operationId: monitoring_metrics_system_list
      responses:
        "200":
          description: ""
          content: {}
  /projects/:
    get:
      summary: List Projects
      tags:
      - projects
      description: List projects with optional filtering
      operationId: projects_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Project
      tags:
      - projects
      description: Create a new project
      operationId: projects_create
      responses:
        "201":
          description: ""
          content: {}
  /projects/default/:
    get:
      summary: Get Default Project
      tags:
      - projects
      description: Get the default project
      operationId: projects_default_list
      responses:
        "200":
          description: ""
          content: {}
  /projects/{project_id}/:
    get:
      summary: Get Project Details
      tags:
      - projects
      description: Get a specific project by ID
      operationId: projects_read
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Project
      tags:
      - projects
      description: Update an existing project
      operationId: projects_update
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Project
      tags:
      - projects
      description: Delete a project
      operationId: projects_delete
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /projects/{project_id}/agents:
    get:
      summary: List Project Agents
      tags:
      - projects
      description: Get all agents for a project
      operationId: projects_agents_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Project Agent
      tags:
      - projects
      description: Create a new agent for a project
      operationId: projects_agents_create
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /projects/{project_id}/billing:
    get:
      summary: Get Project Billing Info
      tags:
      - projects
      description: Get billing information for a project
      operationId: projects_billing_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Project Billing Settings
      tags:
      - projects
      description: Update billing settings for a project
      operationId: projects_billing_update
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /projects/{project_id}/members/:
    get:
      summary: List Project Members
      tags:
      - projects
      description: List all members for a project
      operationId: projects_members_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Project Member
      tags:
      - projects
      description: Add a member to a project
      operationId: projects_members_create
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /projects/{project_id}/members/{user_id}/:
    put:
      summary: Update Project Member Role
      tags:
      - projects
      description: Update project member role
      operationId: projects_members_update
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Remove Project Member
      tags:
      - projects
      description: Remove a member from a project
      operationId: projects_members_delete
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /projects/{project_id}/memory:
    get:
      summary: List Project Memory Items
      tags:
      - projects
      description: List all memories for a specific project
      operationId: projects_memory_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Add Project Memory Item
      tags:
      - projects
      description: Create a new memory for a specific project
      operationId: projects_memory_create
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /projects/{project_id}/security/audit-logs/:
    get:
      summary: Get Project Audit Logs
      tags:
      - projects
      description: Get audit logs for a project
      operationId: projects_security_audit-logs_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /projects/{project_id}/security/policies/:
    get:
      summary: List Project Security Policies
      tags:
      - projects
      description: List security policies for a project
      operationId: projects_security_policies_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Project Security Policy
      tags:
      - projects
      description: Create a new security policy for a project
      operationId: projects_security_policies_create
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /projects/{project_id}/security/policies/{policy_id}/:
    put:
      summary: Update Project Security Policy
      tags:
      - projects
      description: Update a security policy for a project
      operationId: projects_security_policies_update
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      - name: policy_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Project Security Policy
      tags:
      - projects
      description: Delete a security policy for a project
      operationId: projects_security_policies_delete
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      - name: policy_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /projects/{project_id}/workflows:
    get:
      summary: List Project Workflows
      tags:
      - projects
      description: List workflows for a specific project
      operationId: projects_workflows_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Project Workflow
      tags:
      - projects
      description: Create a new workflow for a specific project
      operationId: projects_workflows_create
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /prompts/:
    get:
      summary: List Prompts
      tags:
      - prompts
      description: List all prompts
      operationId: prompts_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Prompt
      tags:
      - prompts
      description: Create a new prompt
      operationId: prompts_create
      responses:
        "201":
          description: ""
          content: {}
  /prompts/projects/{project_id}/:
    get:
      summary: List Project Prompts
      tags:
      - prompts
      description: List prompts for a specific project
      operationId: prompts_projects_read
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Project Prompt
      tags:
      - prompts
      description: Create a new prompt for a specific project
      operationId: prompts_projects_create
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /prompts/templates/:
    get:
      summary: List Prompt Templates
      tags:
      - prompts
      description: Get all prompt templates
      operationId: prompts_templates_list
      responses:
        "200":
          description: ""
          content: {}
  /prompts/{prompt_id}/:
    get:
      summary: Get Prompt Details
      tags:
      - prompts
      description: Get a specific prompt
      operationId: prompts_read
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Prompt
      tags:
      - prompts
      description: Update a prompt
      operationId: prompts_update
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Prompt
      tags:
      - prompts
      description: Delete a prompt
      operationId: prompts_delete
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /prompts/{prompt_id}/test/:
    post:
      summary: Test Prompt
      tags:
      - prompts
      description: Test a prompt
      operationId: prompts_test_create
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /prompts/{prompt_id}/versions/:
    get:
      summary: List Prompt Versions
      tags:
      - prompts
      description: Get all versions of a prompt
      operationId: prompts_versions_list
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /security/audit-logs/:
    get:
      summary: List Security Audit Logs
      tags:
      - security
      description: Get audit logs with optional filtering
      operationId: security_audit-logs_list
      responses:
        "200":
          description: ""
          content: {}
  /security/policies/:
    get:
      summary: List Security Policies
      tags:
      - security
      description: Get list of security policies
      operationId: security_policies_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Security Policy
      tags:
      - security
      description: Create a new security policy
      operationId: security_policies_create
      responses:
        "201":
          description: ""
          content: {}
  /security/policies/{policy_id}/:
    put:
      summary: Update Security Policy
      tags:
      - security
      description: Update a security policy
      operationId: security_policies_update
      parameters:
      - name: policy_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Security Policy
      tags:
      - security
      description: Delete a security policy
      operationId: security_policies_delete
      parameters:
      - name: policy_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /security/scan/:
    post:
      summary: Start Security Scan
      tags:
      - security
      description: Initiate a security scan
      operationId: security_scan_create
      responses:
        "201":
          description: ""
          content: {}
  /security/scan/results/:
    get:
      summary: Get Security Scan Results
      tags:
      - security
      description: Get security scan results
      operationId: security_scan_results_list
      responses:
        "200":
          description: ""
          content: {}
  /testing/ab-tests/:
    get:
      summary: List A/B Tests
      tags:
      - testing
      description: List all A/B tests with optional filtering
      operationId: testing_ab-tests_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create A/B Test
      tags:
      - testing
      description: Create a new A/B test
      operationId: testing_ab-tests_create
      responses:
        "201":
          description: ""
          content: {}
  /testing/ab-tests/{ab_test_id}/:
    get:
      summary: Get A/B Test Details
      tags:
      - testing
      description: Get a specific A/B test
      operationId: testing_ab-tests_read
      parameters:
      - name: ab_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update A/B Test
      tags:
      - testing
      description: Update an A/B test
      operationId: testing_ab-tests_update
      parameters:
      - name: ab_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete A/B Test
      tags:
      - testing
      description: Delete an A/B test
      operationId: testing_ab-tests_delete
      parameters:
      - name: ab_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /testing/ab-tests/{ab_test_id}/results/:
    get:
      summary: Get A/B Test Results
      tags:
      - testing
      description: Get A/B test results
      operationId: testing_ab-tests_results_list
      parameters:
      - name: ab_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /testing/agents/{agent_id}/test-cases/:
    get:
      summary: List Agent Test Cases
      tags:
      - testing
      description: Get test cases for an agent
      operationId: testing_agents_test-cases_list
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /testing/projects/{project_id}/test-cases/:
    get:
      summary: List Project Test Cases
      tags:
      - testing
      description: Get test cases for a project
      operationId: testing_projects_test-cases_list
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /testing/regression-tests/:
    get:
      summary: List Regression Tests
      tags:
      - testing
      description: List all regression tests with optional filtering
      operationId: testing_regression-tests_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Regression Test
      tags:
      - testing
      description: Create a new regression test
      operationId: testing_regression-tests_create
      responses:
        "201":
          description: ""
          content: {}
  /testing/regression-tests/{regression_test_id}/:
    get:
      summary: Get Regression Test Details
      tags:
      - testing
      description: Get a specific regression test
      operationId: testing_regression-tests_read
      parameters:
      - name: regression_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Regression Test
      tags:
      - testing
      description: Update a regression test
      operationId: testing_regression-tests_update
      parameters:
      - name: regression_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Regression Test
      tags:
      - testing
      description: Delete a regression test
      operationId: testing_regression-tests_delete
      parameters:
      - name: regression_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /testing/regression-tests/{regression_test_id}/run/:
    post:
      summary: Run Regression Test
      tags:
      - testing
      description: Run a regression test
      operationId: testing_regression-tests_run_create
      parameters:
      - name: regression_test_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /testing/test-cases/:
    get:
      summary: List Test Cases
      tags:
      - testing
      description: List all test cases with optional filtering
      operationId: testing_test-cases_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Test Case
      tags:
      - testing
      description: Create a new test case
      operationId: testing_test-cases_create
      responses:
        "201":
          description: ""
          content: {}
  /testing/test-cases/{test_case_id}/:
    get:
      summary: Get Test Case Details
      tags:
      - testing
      description: Get a specific test case
      operationId: testing_test-cases_read
      parameters:
      - name: test_case_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Test Case
      tags:
      - testing
      description: Update a test case
      operationId: testing_test-cases_update
      parameters:
      - name: test_case_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Test Case
      tags:
      - testing
      description: Delete a test case
      operationId: testing_test-cases_delete
      parameters:
      - name: test_case_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /testing/test-cases/{test_case_id}/run/:
    post:
      summary: Run Test Case
      tags:
      - testing
      description: Run a test case
      operationId: testing_test-cases_run_create
      parameters:
      - name: test_case_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /testing/test-runs/:
    get:
      summary: List Test Runs
      tags:
      - testing
      description: List all test runs with optional filtering
      operationId: testing_test-runs_list
      responses:
        "200":
          description: ""
          content: {}
  /testing/test-runs/{test_run_id}/:
    get:
      summary: Get Test Run Details
      tags:
      - testing
      description: Get a specific test run
      operationId: testing_test-runs_read
      parameters:
      - name: test_run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /tools/:
    get:
      summary: List Tools
      tags:
      - tools
      description: List all tools with optional filtering
      operationId: tools_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Tool
      tags:
      - tools
      description: Create a new tool
      operationId: tools_create
      responses:
        "201":
          description: ""
          content: {}
  /tools/categories/:
    get:
      summary: List Tool Categories
      tags:
      - tools
      description: Get all tool categories
      operationId: tools_categories_list
      responses:
        "200":
          description: ""
          content: {}
  /tools/projects/{project_id}/:
    get:
      summary: List Project Tools
      tags:
      - tools
      description: Get tools for a project
      operationId: tools_projects_read
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /tools/{tool_id}/:
    get:
      summary: Get Tool Details
      tags:
      - tools
      description: Get a specific tool
      operationId: tools_read
      parameters:
      - name: tool_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Tool
      tags:
      - tools
      description: Update a tool
      operationId: tools_update
      parameters:
      - name: tool_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Tool
      tags:
      - tools
      description: Delete a tool
      operationId: tools_delete
      parameters:
      - name: tool_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /tools/{tool_id}/execute/:
    post:
      summary: Execute Tool
      tags:
      - tools
      description: Execute a tool
      operationId: tools_execute_create
      parameters:
      - name: tool_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
  /users/:
    get:
      summary: List Users
      tags:
      - users
      description: List all users. Admin access only.
      operationId: users_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create User
      tags:
      - users
      description: Create a new user. Admin access only.
      operationId: users_create
      responses:
        "201":
          description: ""
          content: {}
  /users/profile:
    get:
      summary: Get Current User Profile
      tags:
      - users
      description: Get the current user's profile.
      operationId: users_profile_list
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Current User Profile
      tags:
      - users
      description: Update the current user's profile.
      operationId: users_profile_update
      responses:
        "200":
          description: ""
          content: {}
  /users/{user_id}:
    get:
      summary: Get User Details
      tags:
      - users
      description: Get details for a specific user. Admin access only.
      operationId: users_read
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update User
      tags:
      - users
      description: Update a specific user. Admin access only.
      operationId: users_update
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete User
      tags:
      - users
      description: Delete a specific user. Admin access only.
      operationId: users_delete
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /users/{user_id}/password:
    put:
      summary: Update User Password
      tags:
      - users
      description: Update a user's password
      operationId: users_password_update
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /users/{user_id}/projects:
    get:
      summary: List User Projects
      tags:
      - users
      description: List all projects for a specific user. Admin access only.
      operationId: users_projects_list
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /webhooks/:
    get:
      summary: List Webhooks
      tags:
      - webhooks
      description: API endpoint for listing and creating webhooks.
      operationId: webhooks_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      summary: Create Webhook
      tags:
      - webhooks
      description: API endpoint for listing and creating webhooks.
      operationId: webhooks_create
      responses:
        "201":
          description: ""
          content: {}
  /webhooks/event-types:
    get:
      summary: List Webhook Event Types
      tags:
      - webhooks
      description: API endpoint for retrieving available webhook event types.
      operationId: webhooks_event-types_list
      responses:
        "200":
          description: ""
          content: {}
  /webhooks/{webhook_id}:
    get:
      summary: Get Webhook Details
      tags:
      - webhooks
      description: "API endpoint for retrieving, updating, and deleting a webhook."
      operationId: webhooks_read
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    put:
      summary: Update Webhook
      tags:
      - webhooks
      description: "API endpoint for retrieving, updating, and deleting a webhook."
      operationId: webhooks_update
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
    delete:
      summary: Delete Webhook
      tags:
      - webhooks
      description: "API endpoint for retrieving, updating, and deleting a webhook."
      operationId: webhooks_delete
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
          content: {}
  /webhooks/{webhook_id}/logs:
    get:
      summary: List Webhook Logs
      tags:
      - webhooks
      description: API endpoint for retrieving webhook delivery logs.
      operationId: webhooks_logs_list
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content: {}
  /webhooks/{webhook_id}/test:
    post:
      summary: Test Webhook
      tags:
      - webhooks
      description: API endpoint for testing a webhook.
      operationId: webhooks_test_create
      parameters:
      - name: webhook_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: ""
          content: {}
components:
  securitySchemes:
    Basic:
      type: http
      scheme: basic
x-original-swagger-version: "2.0"
